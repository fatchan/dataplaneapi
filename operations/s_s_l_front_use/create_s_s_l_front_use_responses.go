// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package s_s_l_front_use

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/client-native/v6/models"
)

// CreateSSLFrontUseCreatedCode is the HTTP code returned for type CreateSSLFrontUseCreated
const CreateSSLFrontUseCreatedCode int = 201

/*
CreateSSLFrontUseCreated SSLFrontUse created

swagger:response createSSLFrontUseCreated
*/
type CreateSSLFrontUseCreated struct {

	/*
	  In: Body
	*/
	Payload *models.SSLFrontUse `json:"body,omitempty"`
}

// NewCreateSSLFrontUseCreated creates CreateSSLFrontUseCreated with default headers values
func NewCreateSSLFrontUseCreated() *CreateSSLFrontUseCreated {

	return &CreateSSLFrontUseCreated{}
}

// WithPayload adds the payload to the create s s l front use created response
func (o *CreateSSLFrontUseCreated) WithPayload(payload *models.SSLFrontUse) *CreateSSLFrontUseCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create s s l front use created response
func (o *CreateSSLFrontUseCreated) SetPayload(payload *models.SSLFrontUse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateSSLFrontUseCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateSSLFrontUseAcceptedCode is the HTTP code returned for type CreateSSLFrontUseAccepted
const CreateSSLFrontUseAcceptedCode int = 202

/*
CreateSSLFrontUseAccepted Configuration change accepted and reload requested

swagger:response createSSLFrontUseAccepted
*/
type CreateSSLFrontUseAccepted struct {
	/*ID of the requested reload

	 */
	ReloadID string `json:"Reload-ID"`

	/*
	  In: Body
	*/
	Payload *models.SSLFrontUse `json:"body,omitempty"`
}

// NewCreateSSLFrontUseAccepted creates CreateSSLFrontUseAccepted with default headers values
func NewCreateSSLFrontUseAccepted() *CreateSSLFrontUseAccepted {

	return &CreateSSLFrontUseAccepted{}
}

// WithReloadID adds the reloadId to the create s s l front use accepted response
func (o *CreateSSLFrontUseAccepted) WithReloadID(reloadID string) *CreateSSLFrontUseAccepted {
	o.ReloadID = reloadID
	return o
}

// SetReloadID sets the reloadId to the create s s l front use accepted response
func (o *CreateSSLFrontUseAccepted) SetReloadID(reloadID string) {
	o.ReloadID = reloadID
}

// WithPayload adds the payload to the create s s l front use accepted response
func (o *CreateSSLFrontUseAccepted) WithPayload(payload *models.SSLFrontUse) *CreateSSLFrontUseAccepted {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create s s l front use accepted response
func (o *CreateSSLFrontUseAccepted) SetPayload(payload *models.SSLFrontUse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateSSLFrontUseAccepted) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Reload-ID

	reloadID := o.ReloadID
	if reloadID != "" {
		rw.Header().Set("Reload-ID", reloadID)
	}

	rw.WriteHeader(202)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateSSLFrontUseBadRequestCode is the HTTP code returned for type CreateSSLFrontUseBadRequest
const CreateSSLFrontUseBadRequestCode int = 400

/*
CreateSSLFrontUseBadRequest Bad request

swagger:response createSSLFrontUseBadRequest
*/
type CreateSSLFrontUseBadRequest struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateSSLFrontUseBadRequest creates CreateSSLFrontUseBadRequest with default headers values
func NewCreateSSLFrontUseBadRequest() *CreateSSLFrontUseBadRequest {

	return &CreateSSLFrontUseBadRequest{}
}

// WithConfigurationVersion adds the configurationVersion to the create s s l front use bad request response
func (o *CreateSSLFrontUseBadRequest) WithConfigurationVersion(configurationVersion string) *CreateSSLFrontUseBadRequest {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the create s s l front use bad request response
func (o *CreateSSLFrontUseBadRequest) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the create s s l front use bad request response
func (o *CreateSSLFrontUseBadRequest) WithPayload(payload *models.Error) *CreateSSLFrontUseBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create s s l front use bad request response
func (o *CreateSSLFrontUseBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateSSLFrontUseBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateSSLFrontUseConflictCode is the HTTP code returned for type CreateSSLFrontUseConflict
const CreateSSLFrontUseConflictCode int = 409

/*
CreateSSLFrontUseConflict The specified resource already exists

swagger:response createSSLFrontUseConflict
*/
type CreateSSLFrontUseConflict struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateSSLFrontUseConflict creates CreateSSLFrontUseConflict with default headers values
func NewCreateSSLFrontUseConflict() *CreateSSLFrontUseConflict {

	return &CreateSSLFrontUseConflict{}
}

// WithConfigurationVersion adds the configurationVersion to the create s s l front use conflict response
func (o *CreateSSLFrontUseConflict) WithConfigurationVersion(configurationVersion string) *CreateSSLFrontUseConflict {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the create s s l front use conflict response
func (o *CreateSSLFrontUseConflict) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the create s s l front use conflict response
func (o *CreateSSLFrontUseConflict) WithPayload(payload *models.Error) *CreateSSLFrontUseConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create s s l front use conflict response
func (o *CreateSSLFrontUseConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateSSLFrontUseConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
CreateSSLFrontUseDefault General Error

swagger:response createSSLFrontUseDefault
*/
type CreateSSLFrontUseDefault struct {
	_statusCode int
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateSSLFrontUseDefault creates CreateSSLFrontUseDefault with default headers values
func NewCreateSSLFrontUseDefault(code int) *CreateSSLFrontUseDefault {
	if code <= 0 {
		code = 500
	}

	return &CreateSSLFrontUseDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the create s s l front use default response
func (o *CreateSSLFrontUseDefault) WithStatusCode(code int) *CreateSSLFrontUseDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the create s s l front use default response
func (o *CreateSSLFrontUseDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithConfigurationVersion adds the configurationVersion to the create s s l front use default response
func (o *CreateSSLFrontUseDefault) WithConfigurationVersion(configurationVersion string) *CreateSSLFrontUseDefault {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the create s s l front use default response
func (o *CreateSSLFrontUseDefault) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the create s s l front use default response
func (o *CreateSSLFrontUseDefault) WithPayload(payload *models.Error) *CreateSSLFrontUseDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create s s l front use default response
func (o *CreateSSLFrontUseDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateSSLFrontUseDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
