// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package s_s_l_front_use

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/client-native/v6/models"
)

// ReplaceSSLFrontUseOKCode is the HTTP code returned for type ReplaceSSLFrontUseOK
const ReplaceSSLFrontUseOKCode int = 200

/*
ReplaceSSLFrontUseOK SSLFrontUse replaced

swagger:response replaceSSLFrontUseOK
*/
type ReplaceSSLFrontUseOK struct {

	/*
	  In: Body
	*/
	Payload *models.SSLFrontUse `json:"body,omitempty"`
}

// NewReplaceSSLFrontUseOK creates ReplaceSSLFrontUseOK with default headers values
func NewReplaceSSLFrontUseOK() *ReplaceSSLFrontUseOK {

	return &ReplaceSSLFrontUseOK{}
}

// WithPayload adds the payload to the replace s s l front use o k response
func (o *ReplaceSSLFrontUseOK) WithPayload(payload *models.SSLFrontUse) *ReplaceSSLFrontUseOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace s s l front use o k response
func (o *ReplaceSSLFrontUseOK) SetPayload(payload *models.SSLFrontUse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceSSLFrontUseOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceSSLFrontUseAcceptedCode is the HTTP code returned for type ReplaceSSLFrontUseAccepted
const ReplaceSSLFrontUseAcceptedCode int = 202

/*
ReplaceSSLFrontUseAccepted Configuration change accepted and reload requested

swagger:response replaceSSLFrontUseAccepted
*/
type ReplaceSSLFrontUseAccepted struct {
	/*ID of the requested reload

	 */
	ReloadID string `json:"Reload-ID"`

	/*
	  In: Body
	*/
	Payload *models.SSLFrontUse `json:"body,omitempty"`
}

// NewReplaceSSLFrontUseAccepted creates ReplaceSSLFrontUseAccepted with default headers values
func NewReplaceSSLFrontUseAccepted() *ReplaceSSLFrontUseAccepted {

	return &ReplaceSSLFrontUseAccepted{}
}

// WithReloadID adds the reloadId to the replace s s l front use accepted response
func (o *ReplaceSSLFrontUseAccepted) WithReloadID(reloadID string) *ReplaceSSLFrontUseAccepted {
	o.ReloadID = reloadID
	return o
}

// SetReloadID sets the reloadId to the replace s s l front use accepted response
func (o *ReplaceSSLFrontUseAccepted) SetReloadID(reloadID string) {
	o.ReloadID = reloadID
}

// WithPayload adds the payload to the replace s s l front use accepted response
func (o *ReplaceSSLFrontUseAccepted) WithPayload(payload *models.SSLFrontUse) *ReplaceSSLFrontUseAccepted {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace s s l front use accepted response
func (o *ReplaceSSLFrontUseAccepted) SetPayload(payload *models.SSLFrontUse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceSSLFrontUseAccepted) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Reload-ID

	reloadID := o.ReloadID
	if reloadID != "" {
		rw.Header().Set("Reload-ID", reloadID)
	}

	rw.WriteHeader(202)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceSSLFrontUseBadRequestCode is the HTTP code returned for type ReplaceSSLFrontUseBadRequest
const ReplaceSSLFrontUseBadRequestCode int = 400

/*
ReplaceSSLFrontUseBadRequest Bad request

swagger:response replaceSSLFrontUseBadRequest
*/
type ReplaceSSLFrontUseBadRequest struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceSSLFrontUseBadRequest creates ReplaceSSLFrontUseBadRequest with default headers values
func NewReplaceSSLFrontUseBadRequest() *ReplaceSSLFrontUseBadRequest {

	return &ReplaceSSLFrontUseBadRequest{}
}

// WithConfigurationVersion adds the configurationVersion to the replace s s l front use bad request response
func (o *ReplaceSSLFrontUseBadRequest) WithConfigurationVersion(configurationVersion string) *ReplaceSSLFrontUseBadRequest {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the replace s s l front use bad request response
func (o *ReplaceSSLFrontUseBadRequest) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the replace s s l front use bad request response
func (o *ReplaceSSLFrontUseBadRequest) WithPayload(payload *models.Error) *ReplaceSSLFrontUseBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace s s l front use bad request response
func (o *ReplaceSSLFrontUseBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceSSLFrontUseBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceSSLFrontUseNotFoundCode is the HTTP code returned for type ReplaceSSLFrontUseNotFound
const ReplaceSSLFrontUseNotFoundCode int = 404

/*
ReplaceSSLFrontUseNotFound The specified resource was not found

swagger:response replaceSSLFrontUseNotFound
*/
type ReplaceSSLFrontUseNotFound struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceSSLFrontUseNotFound creates ReplaceSSLFrontUseNotFound with default headers values
func NewReplaceSSLFrontUseNotFound() *ReplaceSSLFrontUseNotFound {

	return &ReplaceSSLFrontUseNotFound{}
}

// WithConfigurationVersion adds the configurationVersion to the replace s s l front use not found response
func (o *ReplaceSSLFrontUseNotFound) WithConfigurationVersion(configurationVersion string) *ReplaceSSLFrontUseNotFound {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the replace s s l front use not found response
func (o *ReplaceSSLFrontUseNotFound) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the replace s s l front use not found response
func (o *ReplaceSSLFrontUseNotFound) WithPayload(payload *models.Error) *ReplaceSSLFrontUseNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace s s l front use not found response
func (o *ReplaceSSLFrontUseNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceSSLFrontUseNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
ReplaceSSLFrontUseDefault General Error

swagger:response replaceSSLFrontUseDefault
*/
type ReplaceSSLFrontUseDefault struct {
	_statusCode int
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceSSLFrontUseDefault creates ReplaceSSLFrontUseDefault with default headers values
func NewReplaceSSLFrontUseDefault(code int) *ReplaceSSLFrontUseDefault {
	if code <= 0 {
		code = 500
	}

	return &ReplaceSSLFrontUseDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the replace s s l front use default response
func (o *ReplaceSSLFrontUseDefault) WithStatusCode(code int) *ReplaceSSLFrontUseDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the replace s s l front use default response
func (o *ReplaceSSLFrontUseDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithConfigurationVersion adds the configurationVersion to the replace s s l front use default response
func (o *ReplaceSSLFrontUseDefault) WithConfigurationVersion(configurationVersion string) *ReplaceSSLFrontUseDefault {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the replace s s l front use default response
func (o *ReplaceSSLFrontUseDefault) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the replace s s l front use default response
func (o *ReplaceSSLFrontUseDefault) WithPayload(payload *models.Error) *ReplaceSSLFrontUseDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace s s l front use default response
func (o *ReplaceSSLFrontUseDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceSSLFrontUseDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
