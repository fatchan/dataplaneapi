// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package s_s_l_runtime

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetCaEntryParams creates a new GetCaEntryParams object
//
// There are no default values defined in the spec.
func NewGetCaEntryParams() GetCaEntryParams {

	return GetCaEntryParams{}
}

// GetCaEntryParams contains all the bound params for the get ca entry operation
// typically these are obtained from a http.Request
//
// swagger:parameters getCaEntry
type GetCaEntryParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*SSL CA file index
	  Required: true
	  Minimum: 0
	  In: path
	*/
	Index int64
	/*SSL CA file name
	  Required: true
	  In: path
	*/
	Name string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetCaEntryParams() beforehand.
func (o *GetCaEntryParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	rIndex, rhkIndex, _ := route.Params.GetOK("index")
	if err := o.bindIndex(rIndex, rhkIndex, route.Formats); err != nil {
		res = append(res, err)
	}

	rName, rhkName, _ := route.Params.GetOK("name")
	if err := o.bindName(rName, rhkName, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindIndex binds and validates parameter Index from path.
func (o *GetCaEntryParams) bindIndex(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("index", "path", "int64", raw)
	}
	o.Index = value

	if err := o.validateIndex(formats); err != nil {
		return err
	}

	return nil
}

// validateIndex carries on validations for parameter Index
func (o *GetCaEntryParams) validateIndex(formats strfmt.Registry) error {

	if err := validate.MinimumInt("index", "path", o.Index, 0, false); err != nil {
		return err
	}

	return nil
}

// bindName binds and validates parameter Name from path.
func (o *GetCaEntryParams) bindName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.Name = raw

	return nil
}
