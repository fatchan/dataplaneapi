// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package crt_load

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetCrtLoadsHandlerFunc turns a function with the right signature into a get crt loads handler
type GetCrtLoadsHandlerFunc func(GetCrtLoadsParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetCrtLoadsHandlerFunc) Handle(params GetCrtLoadsParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetCrtLoadsHandler interface for that can handle valid get crt loads params
type GetCrtLoadsHandler interface {
	Handle(GetCrtLoadsParams, interface{}) middleware.Responder
}

// NewGetCrtLoads creates a new http.Handler for the get crt loads operation
func NewGetCrtLoads(ctx *middleware.Context, handler GetCrtLoadsHandler) *GetCrtLoads {
	return &GetCrtLoads{Context: ctx, Handler: handler}
}

/*
	GetCrtLoads swagger:route GET /services/haproxy/configuration/crt_loads CrtLoad getCrtLoads

# Return an array of loaded certificates

Returns the list of loaded certificates from the specified crt_store
*/
type GetCrtLoads struct {
	Context *middleware.Context
	Handler GetCrtLoadsHandler
}

func (o *GetCrtLoads) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetCrtLoadsParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
