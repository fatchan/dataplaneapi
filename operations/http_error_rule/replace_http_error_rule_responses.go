// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package http_error_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/client-native/v5/models"
)

// ReplaceHTTPErrorRuleOKCode is the HTTP code returned for type ReplaceHTTPErrorRuleOK
const ReplaceHTTPErrorRuleOKCode int = 200

/*
ReplaceHTTPErrorRuleOK HTTP Error Rule replaced

swagger:response replaceHttpErrorRuleOK
*/
type ReplaceHTTPErrorRuleOK struct {

	/*
	  In: Body
	*/
	Payload *models.HTTPErrorRule `json:"body,omitempty"`
}

// NewReplaceHTTPErrorRuleOK creates ReplaceHTTPErrorRuleOK with default headers values
func NewReplaceHTTPErrorRuleOK() *ReplaceHTTPErrorRuleOK {

	return &ReplaceHTTPErrorRuleOK{}
}

// WithPayload adds the payload to the replace Http error rule o k response
func (o *ReplaceHTTPErrorRuleOK) WithPayload(payload *models.HTTPErrorRule) *ReplaceHTTPErrorRuleOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Http error rule o k response
func (o *ReplaceHTTPErrorRuleOK) SetPayload(payload *models.HTTPErrorRule) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceHTTPErrorRuleOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceHTTPErrorRuleAcceptedCode is the HTTP code returned for type ReplaceHTTPErrorRuleAccepted
const ReplaceHTTPErrorRuleAcceptedCode int = 202

/*
ReplaceHTTPErrorRuleAccepted Configuration change accepted and reload requested

swagger:response replaceHttpErrorRuleAccepted
*/
type ReplaceHTTPErrorRuleAccepted struct {
	/*ID of the requested reload

	 */
	ReloadID string `json:"Reload-ID"`

	/*
	  In: Body
	*/
	Payload *models.HTTPErrorRule `json:"body,omitempty"`
}

// NewReplaceHTTPErrorRuleAccepted creates ReplaceHTTPErrorRuleAccepted with default headers values
func NewReplaceHTTPErrorRuleAccepted() *ReplaceHTTPErrorRuleAccepted {

	return &ReplaceHTTPErrorRuleAccepted{}
}

// WithReloadID adds the reloadId to the replace Http error rule accepted response
func (o *ReplaceHTTPErrorRuleAccepted) WithReloadID(reloadID string) *ReplaceHTTPErrorRuleAccepted {
	o.ReloadID = reloadID
	return o
}

// SetReloadID sets the reloadId to the replace Http error rule accepted response
func (o *ReplaceHTTPErrorRuleAccepted) SetReloadID(reloadID string) {
	o.ReloadID = reloadID
}

// WithPayload adds the payload to the replace Http error rule accepted response
func (o *ReplaceHTTPErrorRuleAccepted) WithPayload(payload *models.HTTPErrorRule) *ReplaceHTTPErrorRuleAccepted {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Http error rule accepted response
func (o *ReplaceHTTPErrorRuleAccepted) SetPayload(payload *models.HTTPErrorRule) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceHTTPErrorRuleAccepted) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Reload-ID

	reloadID := o.ReloadID
	if reloadID != "" {
		rw.Header().Set("Reload-ID", reloadID)
	}

	rw.WriteHeader(202)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceHTTPErrorRuleBadRequestCode is the HTTP code returned for type ReplaceHTTPErrorRuleBadRequest
const ReplaceHTTPErrorRuleBadRequestCode int = 400

/*
ReplaceHTTPErrorRuleBadRequest Bad request

swagger:response replaceHttpErrorRuleBadRequest
*/
type ReplaceHTTPErrorRuleBadRequest struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceHTTPErrorRuleBadRequest creates ReplaceHTTPErrorRuleBadRequest with default headers values
func NewReplaceHTTPErrorRuleBadRequest() *ReplaceHTTPErrorRuleBadRequest {

	return &ReplaceHTTPErrorRuleBadRequest{}
}

// WithConfigurationVersion adds the configurationVersion to the replace Http error rule bad request response
func (o *ReplaceHTTPErrorRuleBadRequest) WithConfigurationVersion(configurationVersion string) *ReplaceHTTPErrorRuleBadRequest {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the replace Http error rule bad request response
func (o *ReplaceHTTPErrorRuleBadRequest) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the replace Http error rule bad request response
func (o *ReplaceHTTPErrorRuleBadRequest) WithPayload(payload *models.Error) *ReplaceHTTPErrorRuleBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Http error rule bad request response
func (o *ReplaceHTTPErrorRuleBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceHTTPErrorRuleBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceHTTPErrorRuleNotFoundCode is the HTTP code returned for type ReplaceHTTPErrorRuleNotFound
const ReplaceHTTPErrorRuleNotFoundCode int = 404

/*
ReplaceHTTPErrorRuleNotFound The specified resource was not found

swagger:response replaceHttpErrorRuleNotFound
*/
type ReplaceHTTPErrorRuleNotFound struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceHTTPErrorRuleNotFound creates ReplaceHTTPErrorRuleNotFound with default headers values
func NewReplaceHTTPErrorRuleNotFound() *ReplaceHTTPErrorRuleNotFound {

	return &ReplaceHTTPErrorRuleNotFound{}
}

// WithConfigurationVersion adds the configurationVersion to the replace Http error rule not found response
func (o *ReplaceHTTPErrorRuleNotFound) WithConfigurationVersion(configurationVersion string) *ReplaceHTTPErrorRuleNotFound {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the replace Http error rule not found response
func (o *ReplaceHTTPErrorRuleNotFound) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the replace Http error rule not found response
func (o *ReplaceHTTPErrorRuleNotFound) WithPayload(payload *models.Error) *ReplaceHTTPErrorRuleNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Http error rule not found response
func (o *ReplaceHTTPErrorRuleNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceHTTPErrorRuleNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
ReplaceHTTPErrorRuleDefault General Error

swagger:response replaceHttpErrorRuleDefault
*/
type ReplaceHTTPErrorRuleDefault struct {
	_statusCode int
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceHTTPErrorRuleDefault creates ReplaceHTTPErrorRuleDefault with default headers values
func NewReplaceHTTPErrorRuleDefault(code int) *ReplaceHTTPErrorRuleDefault {
	if code <= 0 {
		code = 500
	}

	return &ReplaceHTTPErrorRuleDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the replace HTTP error rule default response
func (o *ReplaceHTTPErrorRuleDefault) WithStatusCode(code int) *ReplaceHTTPErrorRuleDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the replace HTTP error rule default response
func (o *ReplaceHTTPErrorRuleDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithConfigurationVersion adds the configurationVersion to the replace HTTP error rule default response
func (o *ReplaceHTTPErrorRuleDefault) WithConfigurationVersion(configurationVersion string) *ReplaceHTTPErrorRuleDefault {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the replace HTTP error rule default response
func (o *ReplaceHTTPErrorRuleDefault) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the replace HTTP error rule default response
func (o *ReplaceHTTPErrorRuleDefault) WithPayload(payload *models.Error) *ReplaceHTTPErrorRuleDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace HTTP error rule default response
func (o *ReplaceHTTPErrorRuleDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceHTTPErrorRuleDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
