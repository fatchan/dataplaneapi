// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package http_error_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/client-native/v6/models"
)

// CreateHTTPErrorRuleCreatedCode is the HTTP code returned for type CreateHTTPErrorRuleCreated
const CreateHTTPErrorRuleCreatedCode int = 201

/*
CreateHTTPErrorRuleCreated HTTP Error Rule created

swagger:response createHttpErrorRuleCreated
*/
type CreateHTTPErrorRuleCreated struct {

	/*
	  In: Body
	*/
	Payload *models.HTTPErrorRule `json:"body,omitempty"`
}

// NewCreateHTTPErrorRuleCreated creates CreateHTTPErrorRuleCreated with default headers values
func NewCreateHTTPErrorRuleCreated() *CreateHTTPErrorRuleCreated {

	return &CreateHTTPErrorRuleCreated{}
}

// WithPayload adds the payload to the create Http error rule created response
func (o *CreateHTTPErrorRuleCreated) WithPayload(payload *models.HTTPErrorRule) *CreateHTTPErrorRuleCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create Http error rule created response
func (o *CreateHTTPErrorRuleCreated) SetPayload(payload *models.HTTPErrorRule) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateHTTPErrorRuleCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateHTTPErrorRuleAcceptedCode is the HTTP code returned for type CreateHTTPErrorRuleAccepted
const CreateHTTPErrorRuleAcceptedCode int = 202

/*
CreateHTTPErrorRuleAccepted Configuration change accepted and reload requested

swagger:response createHttpErrorRuleAccepted
*/
type CreateHTTPErrorRuleAccepted struct {
	/*ID of the requested reload

	 */
	ReloadID string `json:"Reload-ID"`

	/*
	  In: Body
	*/
	Payload *models.HTTPErrorRule `json:"body,omitempty"`
}

// NewCreateHTTPErrorRuleAccepted creates CreateHTTPErrorRuleAccepted with default headers values
func NewCreateHTTPErrorRuleAccepted() *CreateHTTPErrorRuleAccepted {

	return &CreateHTTPErrorRuleAccepted{}
}

// WithReloadID adds the reloadId to the create Http error rule accepted response
func (o *CreateHTTPErrorRuleAccepted) WithReloadID(reloadID string) *CreateHTTPErrorRuleAccepted {
	o.ReloadID = reloadID
	return o
}

// SetReloadID sets the reloadId to the create Http error rule accepted response
func (o *CreateHTTPErrorRuleAccepted) SetReloadID(reloadID string) {
	o.ReloadID = reloadID
}

// WithPayload adds the payload to the create Http error rule accepted response
func (o *CreateHTTPErrorRuleAccepted) WithPayload(payload *models.HTTPErrorRule) *CreateHTTPErrorRuleAccepted {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create Http error rule accepted response
func (o *CreateHTTPErrorRuleAccepted) SetPayload(payload *models.HTTPErrorRule) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateHTTPErrorRuleAccepted) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Reload-ID

	reloadID := o.ReloadID
	if reloadID != "" {
		rw.Header().Set("Reload-ID", reloadID)
	}

	rw.WriteHeader(202)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateHTTPErrorRuleBadRequestCode is the HTTP code returned for type CreateHTTPErrorRuleBadRequest
const CreateHTTPErrorRuleBadRequestCode int = 400

/*
CreateHTTPErrorRuleBadRequest Bad request

swagger:response createHttpErrorRuleBadRequest
*/
type CreateHTTPErrorRuleBadRequest struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateHTTPErrorRuleBadRequest creates CreateHTTPErrorRuleBadRequest with default headers values
func NewCreateHTTPErrorRuleBadRequest() *CreateHTTPErrorRuleBadRequest {

	return &CreateHTTPErrorRuleBadRequest{}
}

// WithConfigurationVersion adds the configurationVersion to the create Http error rule bad request response
func (o *CreateHTTPErrorRuleBadRequest) WithConfigurationVersion(configurationVersion string) *CreateHTTPErrorRuleBadRequest {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the create Http error rule bad request response
func (o *CreateHTTPErrorRuleBadRequest) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the create Http error rule bad request response
func (o *CreateHTTPErrorRuleBadRequest) WithPayload(payload *models.Error) *CreateHTTPErrorRuleBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create Http error rule bad request response
func (o *CreateHTTPErrorRuleBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateHTTPErrorRuleBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateHTTPErrorRuleConflictCode is the HTTP code returned for type CreateHTTPErrorRuleConflict
const CreateHTTPErrorRuleConflictCode int = 409

/*
CreateHTTPErrorRuleConflict The specified resource already exists

swagger:response createHttpErrorRuleConflict
*/
type CreateHTTPErrorRuleConflict struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateHTTPErrorRuleConflict creates CreateHTTPErrorRuleConflict with default headers values
func NewCreateHTTPErrorRuleConflict() *CreateHTTPErrorRuleConflict {

	return &CreateHTTPErrorRuleConflict{}
}

// WithConfigurationVersion adds the configurationVersion to the create Http error rule conflict response
func (o *CreateHTTPErrorRuleConflict) WithConfigurationVersion(configurationVersion string) *CreateHTTPErrorRuleConflict {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the create Http error rule conflict response
func (o *CreateHTTPErrorRuleConflict) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the create Http error rule conflict response
func (o *CreateHTTPErrorRuleConflict) WithPayload(payload *models.Error) *CreateHTTPErrorRuleConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create Http error rule conflict response
func (o *CreateHTTPErrorRuleConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateHTTPErrorRuleConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
CreateHTTPErrorRuleDefault General Error

swagger:response createHttpErrorRuleDefault
*/
type CreateHTTPErrorRuleDefault struct {
	_statusCode int
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateHTTPErrorRuleDefault creates CreateHTTPErrorRuleDefault with default headers values
func NewCreateHTTPErrorRuleDefault(code int) *CreateHTTPErrorRuleDefault {
	if code <= 0 {
		code = 500
	}

	return &CreateHTTPErrorRuleDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the create HTTP error rule default response
func (o *CreateHTTPErrorRuleDefault) WithStatusCode(code int) *CreateHTTPErrorRuleDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the create HTTP error rule default response
func (o *CreateHTTPErrorRuleDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithConfigurationVersion adds the configurationVersion to the create HTTP error rule default response
func (o *CreateHTTPErrorRuleDefault) WithConfigurationVersion(configurationVersion string) *CreateHTTPErrorRuleDefault {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the create HTTP error rule default response
func (o *CreateHTTPErrorRuleDefault) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the create HTTP error rule default response
func (o *CreateHTTPErrorRuleDefault) WithPayload(payload *models.Error) *CreateHTTPErrorRuleDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create HTTP error rule default response
func (o *CreateHTTPErrorRuleDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateHTTPErrorRuleDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
