// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package http_response_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/client-native/v6/models"
)

// ReplaceHTTPResponseRuleDefaultsOKCode is the HTTP code returned for type ReplaceHTTPResponseRuleDefaultsOK
const ReplaceHTTPResponseRuleDefaultsOKCode int = 200

/*
ReplaceHTTPResponseRuleDefaultsOK HTTP Response Rule replaced

swagger:response replaceHttpResponseRuleDefaultsOK
*/
type ReplaceHTTPResponseRuleDefaultsOK struct {

	/*
	  In: Body
	*/
	Payload *models.HTTPResponseRule `json:"body,omitempty"`
}

// NewReplaceHTTPResponseRuleDefaultsOK creates ReplaceHTTPResponseRuleDefaultsOK with default headers values
func NewReplaceHTTPResponseRuleDefaultsOK() *ReplaceHTTPResponseRuleDefaultsOK {

	return &ReplaceHTTPResponseRuleDefaultsOK{}
}

// WithPayload adds the payload to the replace Http response rule defaults o k response
func (o *ReplaceHTTPResponseRuleDefaultsOK) WithPayload(payload *models.HTTPResponseRule) *ReplaceHTTPResponseRuleDefaultsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Http response rule defaults o k response
func (o *ReplaceHTTPResponseRuleDefaultsOK) SetPayload(payload *models.HTTPResponseRule) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceHTTPResponseRuleDefaultsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceHTTPResponseRuleDefaultsAcceptedCode is the HTTP code returned for type ReplaceHTTPResponseRuleDefaultsAccepted
const ReplaceHTTPResponseRuleDefaultsAcceptedCode int = 202

/*
ReplaceHTTPResponseRuleDefaultsAccepted Configuration change accepted and reload requested

swagger:response replaceHttpResponseRuleDefaultsAccepted
*/
type ReplaceHTTPResponseRuleDefaultsAccepted struct {
	/*ID of the requested reload

	 */
	ReloadID string `json:"Reload-ID"`

	/*
	  In: Body
	*/
	Payload *models.HTTPResponseRule `json:"body,omitempty"`
}

// NewReplaceHTTPResponseRuleDefaultsAccepted creates ReplaceHTTPResponseRuleDefaultsAccepted with default headers values
func NewReplaceHTTPResponseRuleDefaultsAccepted() *ReplaceHTTPResponseRuleDefaultsAccepted {

	return &ReplaceHTTPResponseRuleDefaultsAccepted{}
}

// WithReloadID adds the reloadId to the replace Http response rule defaults accepted response
func (o *ReplaceHTTPResponseRuleDefaultsAccepted) WithReloadID(reloadID string) *ReplaceHTTPResponseRuleDefaultsAccepted {
	o.ReloadID = reloadID
	return o
}

// SetReloadID sets the reloadId to the replace Http response rule defaults accepted response
func (o *ReplaceHTTPResponseRuleDefaultsAccepted) SetReloadID(reloadID string) {
	o.ReloadID = reloadID
}

// WithPayload adds the payload to the replace Http response rule defaults accepted response
func (o *ReplaceHTTPResponseRuleDefaultsAccepted) WithPayload(payload *models.HTTPResponseRule) *ReplaceHTTPResponseRuleDefaultsAccepted {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Http response rule defaults accepted response
func (o *ReplaceHTTPResponseRuleDefaultsAccepted) SetPayload(payload *models.HTTPResponseRule) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceHTTPResponseRuleDefaultsAccepted) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Reload-ID

	reloadID := o.ReloadID
	if reloadID != "" {
		rw.Header().Set("Reload-ID", reloadID)
	}

	rw.WriteHeader(202)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceHTTPResponseRuleDefaultsBadRequestCode is the HTTP code returned for type ReplaceHTTPResponseRuleDefaultsBadRequest
const ReplaceHTTPResponseRuleDefaultsBadRequestCode int = 400

/*
ReplaceHTTPResponseRuleDefaultsBadRequest Bad request

swagger:response replaceHttpResponseRuleDefaultsBadRequest
*/
type ReplaceHTTPResponseRuleDefaultsBadRequest struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceHTTPResponseRuleDefaultsBadRequest creates ReplaceHTTPResponseRuleDefaultsBadRequest with default headers values
func NewReplaceHTTPResponseRuleDefaultsBadRequest() *ReplaceHTTPResponseRuleDefaultsBadRequest {

	return &ReplaceHTTPResponseRuleDefaultsBadRequest{}
}

// WithConfigurationVersion adds the configurationVersion to the replace Http response rule defaults bad request response
func (o *ReplaceHTTPResponseRuleDefaultsBadRequest) WithConfigurationVersion(configurationVersion string) *ReplaceHTTPResponseRuleDefaultsBadRequest {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the replace Http response rule defaults bad request response
func (o *ReplaceHTTPResponseRuleDefaultsBadRequest) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the replace Http response rule defaults bad request response
func (o *ReplaceHTTPResponseRuleDefaultsBadRequest) WithPayload(payload *models.Error) *ReplaceHTTPResponseRuleDefaultsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Http response rule defaults bad request response
func (o *ReplaceHTTPResponseRuleDefaultsBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceHTTPResponseRuleDefaultsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceHTTPResponseRuleDefaultsNotFoundCode is the HTTP code returned for type ReplaceHTTPResponseRuleDefaultsNotFound
const ReplaceHTTPResponseRuleDefaultsNotFoundCode int = 404

/*
ReplaceHTTPResponseRuleDefaultsNotFound The specified resource was not found

swagger:response replaceHttpResponseRuleDefaultsNotFound
*/
type ReplaceHTTPResponseRuleDefaultsNotFound struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceHTTPResponseRuleDefaultsNotFound creates ReplaceHTTPResponseRuleDefaultsNotFound with default headers values
func NewReplaceHTTPResponseRuleDefaultsNotFound() *ReplaceHTTPResponseRuleDefaultsNotFound {

	return &ReplaceHTTPResponseRuleDefaultsNotFound{}
}

// WithConfigurationVersion adds the configurationVersion to the replace Http response rule defaults not found response
func (o *ReplaceHTTPResponseRuleDefaultsNotFound) WithConfigurationVersion(configurationVersion string) *ReplaceHTTPResponseRuleDefaultsNotFound {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the replace Http response rule defaults not found response
func (o *ReplaceHTTPResponseRuleDefaultsNotFound) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the replace Http response rule defaults not found response
func (o *ReplaceHTTPResponseRuleDefaultsNotFound) WithPayload(payload *models.Error) *ReplaceHTTPResponseRuleDefaultsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Http response rule defaults not found response
func (o *ReplaceHTTPResponseRuleDefaultsNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceHTTPResponseRuleDefaultsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
ReplaceHTTPResponseRuleDefaultsDefault General Error

swagger:response replaceHttpResponseRuleDefaultsDefault
*/
type ReplaceHTTPResponseRuleDefaultsDefault struct {
	_statusCode int
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceHTTPResponseRuleDefaultsDefault creates ReplaceHTTPResponseRuleDefaultsDefault with default headers values
func NewReplaceHTTPResponseRuleDefaultsDefault(code int) *ReplaceHTTPResponseRuleDefaultsDefault {
	if code <= 0 {
		code = 500
	}

	return &ReplaceHTTPResponseRuleDefaultsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the replace HTTP response rule defaults default response
func (o *ReplaceHTTPResponseRuleDefaultsDefault) WithStatusCode(code int) *ReplaceHTTPResponseRuleDefaultsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the replace HTTP response rule defaults default response
func (o *ReplaceHTTPResponseRuleDefaultsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithConfigurationVersion adds the configurationVersion to the replace HTTP response rule defaults default response
func (o *ReplaceHTTPResponseRuleDefaultsDefault) WithConfigurationVersion(configurationVersion string) *ReplaceHTTPResponseRuleDefaultsDefault {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the replace HTTP response rule defaults default response
func (o *ReplaceHTTPResponseRuleDefaultsDefault) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the replace HTTP response rule defaults default response
func (o *ReplaceHTTPResponseRuleDefaultsDefault) WithPayload(payload *models.Error) *ReplaceHTTPResponseRuleDefaultsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace HTTP response rule defaults default response
func (o *ReplaceHTTPResponseRuleDefaultsDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceHTTPResponseRuleDefaultsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
