// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package http_response_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/client-native/v6/models"
)

// CreateHTTPResponseRuleDefaultsCreatedCode is the HTTP code returned for type CreateHTTPResponseRuleDefaultsCreated
const CreateHTTPResponseRuleDefaultsCreatedCode int = 201

/*
CreateHTTPResponseRuleDefaultsCreated HTTP Response Rule created

swagger:response createHttpResponseRuleDefaultsCreated
*/
type CreateHTTPResponseRuleDefaultsCreated struct {

	/*
	  In: Body
	*/
	Payload *models.HTTPResponseRule `json:"body,omitempty"`
}

// NewCreateHTTPResponseRuleDefaultsCreated creates CreateHTTPResponseRuleDefaultsCreated with default headers values
func NewCreateHTTPResponseRuleDefaultsCreated() *CreateHTTPResponseRuleDefaultsCreated {

	return &CreateHTTPResponseRuleDefaultsCreated{}
}

// WithPayload adds the payload to the create Http response rule defaults created response
func (o *CreateHTTPResponseRuleDefaultsCreated) WithPayload(payload *models.HTTPResponseRule) *CreateHTTPResponseRuleDefaultsCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create Http response rule defaults created response
func (o *CreateHTTPResponseRuleDefaultsCreated) SetPayload(payload *models.HTTPResponseRule) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateHTTPResponseRuleDefaultsCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateHTTPResponseRuleDefaultsAcceptedCode is the HTTP code returned for type CreateHTTPResponseRuleDefaultsAccepted
const CreateHTTPResponseRuleDefaultsAcceptedCode int = 202

/*
CreateHTTPResponseRuleDefaultsAccepted Configuration change accepted and reload requested

swagger:response createHttpResponseRuleDefaultsAccepted
*/
type CreateHTTPResponseRuleDefaultsAccepted struct {
	/*ID of the requested reload

	 */
	ReloadID string `json:"Reload-ID"`

	/*
	  In: Body
	*/
	Payload *models.HTTPResponseRule `json:"body,omitempty"`
}

// NewCreateHTTPResponseRuleDefaultsAccepted creates CreateHTTPResponseRuleDefaultsAccepted with default headers values
func NewCreateHTTPResponseRuleDefaultsAccepted() *CreateHTTPResponseRuleDefaultsAccepted {

	return &CreateHTTPResponseRuleDefaultsAccepted{}
}

// WithReloadID adds the reloadId to the create Http response rule defaults accepted response
func (o *CreateHTTPResponseRuleDefaultsAccepted) WithReloadID(reloadID string) *CreateHTTPResponseRuleDefaultsAccepted {
	o.ReloadID = reloadID
	return o
}

// SetReloadID sets the reloadId to the create Http response rule defaults accepted response
func (o *CreateHTTPResponseRuleDefaultsAccepted) SetReloadID(reloadID string) {
	o.ReloadID = reloadID
}

// WithPayload adds the payload to the create Http response rule defaults accepted response
func (o *CreateHTTPResponseRuleDefaultsAccepted) WithPayload(payload *models.HTTPResponseRule) *CreateHTTPResponseRuleDefaultsAccepted {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create Http response rule defaults accepted response
func (o *CreateHTTPResponseRuleDefaultsAccepted) SetPayload(payload *models.HTTPResponseRule) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateHTTPResponseRuleDefaultsAccepted) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Reload-ID

	reloadID := o.ReloadID
	if reloadID != "" {
		rw.Header().Set("Reload-ID", reloadID)
	}

	rw.WriteHeader(202)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateHTTPResponseRuleDefaultsBadRequestCode is the HTTP code returned for type CreateHTTPResponseRuleDefaultsBadRequest
const CreateHTTPResponseRuleDefaultsBadRequestCode int = 400

/*
CreateHTTPResponseRuleDefaultsBadRequest Bad request

swagger:response createHttpResponseRuleDefaultsBadRequest
*/
type CreateHTTPResponseRuleDefaultsBadRequest struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateHTTPResponseRuleDefaultsBadRequest creates CreateHTTPResponseRuleDefaultsBadRequest with default headers values
func NewCreateHTTPResponseRuleDefaultsBadRequest() *CreateHTTPResponseRuleDefaultsBadRequest {

	return &CreateHTTPResponseRuleDefaultsBadRequest{}
}

// WithConfigurationVersion adds the configurationVersion to the create Http response rule defaults bad request response
func (o *CreateHTTPResponseRuleDefaultsBadRequest) WithConfigurationVersion(configurationVersion string) *CreateHTTPResponseRuleDefaultsBadRequest {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the create Http response rule defaults bad request response
func (o *CreateHTTPResponseRuleDefaultsBadRequest) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the create Http response rule defaults bad request response
func (o *CreateHTTPResponseRuleDefaultsBadRequest) WithPayload(payload *models.Error) *CreateHTTPResponseRuleDefaultsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create Http response rule defaults bad request response
func (o *CreateHTTPResponseRuleDefaultsBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateHTTPResponseRuleDefaultsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateHTTPResponseRuleDefaultsConflictCode is the HTTP code returned for type CreateHTTPResponseRuleDefaultsConflict
const CreateHTTPResponseRuleDefaultsConflictCode int = 409

/*
CreateHTTPResponseRuleDefaultsConflict The specified resource already exists

swagger:response createHttpResponseRuleDefaultsConflict
*/
type CreateHTTPResponseRuleDefaultsConflict struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateHTTPResponseRuleDefaultsConflict creates CreateHTTPResponseRuleDefaultsConflict with default headers values
func NewCreateHTTPResponseRuleDefaultsConflict() *CreateHTTPResponseRuleDefaultsConflict {

	return &CreateHTTPResponseRuleDefaultsConflict{}
}

// WithConfigurationVersion adds the configurationVersion to the create Http response rule defaults conflict response
func (o *CreateHTTPResponseRuleDefaultsConflict) WithConfigurationVersion(configurationVersion string) *CreateHTTPResponseRuleDefaultsConflict {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the create Http response rule defaults conflict response
func (o *CreateHTTPResponseRuleDefaultsConflict) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the create Http response rule defaults conflict response
func (o *CreateHTTPResponseRuleDefaultsConflict) WithPayload(payload *models.Error) *CreateHTTPResponseRuleDefaultsConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create Http response rule defaults conflict response
func (o *CreateHTTPResponseRuleDefaultsConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateHTTPResponseRuleDefaultsConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
CreateHTTPResponseRuleDefaultsDefault General Error

swagger:response createHttpResponseRuleDefaultsDefault
*/
type CreateHTTPResponseRuleDefaultsDefault struct {
	_statusCode int
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateHTTPResponseRuleDefaultsDefault creates CreateHTTPResponseRuleDefaultsDefault with default headers values
func NewCreateHTTPResponseRuleDefaultsDefault(code int) *CreateHTTPResponseRuleDefaultsDefault {
	if code <= 0 {
		code = 500
	}

	return &CreateHTTPResponseRuleDefaultsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the create HTTP response rule defaults default response
func (o *CreateHTTPResponseRuleDefaultsDefault) WithStatusCode(code int) *CreateHTTPResponseRuleDefaultsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the create HTTP response rule defaults default response
func (o *CreateHTTPResponseRuleDefaultsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithConfigurationVersion adds the configurationVersion to the create HTTP response rule defaults default response
func (o *CreateHTTPResponseRuleDefaultsDefault) WithConfigurationVersion(configurationVersion string) *CreateHTTPResponseRuleDefaultsDefault {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the create HTTP response rule defaults default response
func (o *CreateHTTPResponseRuleDefaultsDefault) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the create HTTP response rule defaults default response
func (o *CreateHTTPResponseRuleDefaultsDefault) WithPayload(payload *models.Error) *CreateHTTPResponseRuleDefaultsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create HTTP response rule defaults default response
func (o *CreateHTTPResponseRuleDefaultsDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateHTTPResponseRuleDefaultsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
