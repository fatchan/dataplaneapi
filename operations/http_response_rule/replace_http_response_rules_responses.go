// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package http_response_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/client-native/v6/models"
)

// ReplaceHTTPResponseRulesOKCode is the HTTP code returned for type ReplaceHTTPResponseRulesOK
const ReplaceHTTPResponseRulesOKCode int = 200

/*
ReplaceHTTPResponseRulesOK All HTTP Response Rule lines replaced

swagger:response replaceHttpResponseRulesOK
*/
type ReplaceHTTPResponseRulesOK struct {

	/*
	  In: Body
	*/
	Payload models.HTTPResponseRules `json:"body,omitempty"`
}

// NewReplaceHTTPResponseRulesOK creates ReplaceHTTPResponseRulesOK with default headers values
func NewReplaceHTTPResponseRulesOK() *ReplaceHTTPResponseRulesOK {

	return &ReplaceHTTPResponseRulesOK{}
}

// WithPayload adds the payload to the replace Http response rules o k response
func (o *ReplaceHTTPResponseRulesOK) WithPayload(payload models.HTTPResponseRules) *ReplaceHTTPResponseRulesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Http response rules o k response
func (o *ReplaceHTTPResponseRulesOK) SetPayload(payload models.HTTPResponseRules) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceHTTPResponseRulesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = models.HTTPResponseRules{}
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ReplaceHTTPResponseRulesAcceptedCode is the HTTP code returned for type ReplaceHTTPResponseRulesAccepted
const ReplaceHTTPResponseRulesAcceptedCode int = 202

/*
ReplaceHTTPResponseRulesAccepted Configuration change accepted and reload requested

swagger:response replaceHttpResponseRulesAccepted
*/
type ReplaceHTTPResponseRulesAccepted struct {
	/*ID of the requested reload

	 */
	ReloadID string `json:"Reload-ID"`

	/*
	  In: Body
	*/
	Payload models.HTTPResponseRules `json:"body,omitempty"`
}

// NewReplaceHTTPResponseRulesAccepted creates ReplaceHTTPResponseRulesAccepted with default headers values
func NewReplaceHTTPResponseRulesAccepted() *ReplaceHTTPResponseRulesAccepted {

	return &ReplaceHTTPResponseRulesAccepted{}
}

// WithReloadID adds the reloadId to the replace Http response rules accepted response
func (o *ReplaceHTTPResponseRulesAccepted) WithReloadID(reloadID string) *ReplaceHTTPResponseRulesAccepted {
	o.ReloadID = reloadID
	return o
}

// SetReloadID sets the reloadId to the replace Http response rules accepted response
func (o *ReplaceHTTPResponseRulesAccepted) SetReloadID(reloadID string) {
	o.ReloadID = reloadID
}

// WithPayload adds the payload to the replace Http response rules accepted response
func (o *ReplaceHTTPResponseRulesAccepted) WithPayload(payload models.HTTPResponseRules) *ReplaceHTTPResponseRulesAccepted {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Http response rules accepted response
func (o *ReplaceHTTPResponseRulesAccepted) SetPayload(payload models.HTTPResponseRules) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceHTTPResponseRulesAccepted) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Reload-ID

	reloadID := o.ReloadID
	if reloadID != "" {
		rw.Header().Set("Reload-ID", reloadID)
	}

	rw.WriteHeader(202)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = models.HTTPResponseRules{}
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ReplaceHTTPResponseRulesBadRequestCode is the HTTP code returned for type ReplaceHTTPResponseRulesBadRequest
const ReplaceHTTPResponseRulesBadRequestCode int = 400

/*
ReplaceHTTPResponseRulesBadRequest Bad request

swagger:response replaceHttpResponseRulesBadRequest
*/
type ReplaceHTTPResponseRulesBadRequest struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceHTTPResponseRulesBadRequest creates ReplaceHTTPResponseRulesBadRequest with default headers values
func NewReplaceHTTPResponseRulesBadRequest() *ReplaceHTTPResponseRulesBadRequest {

	return &ReplaceHTTPResponseRulesBadRequest{}
}

// WithConfigurationVersion adds the configurationVersion to the replace Http response rules bad request response
func (o *ReplaceHTTPResponseRulesBadRequest) WithConfigurationVersion(configurationVersion string) *ReplaceHTTPResponseRulesBadRequest {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the replace Http response rules bad request response
func (o *ReplaceHTTPResponseRulesBadRequest) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the replace Http response rules bad request response
func (o *ReplaceHTTPResponseRulesBadRequest) WithPayload(payload *models.Error) *ReplaceHTTPResponseRulesBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Http response rules bad request response
func (o *ReplaceHTTPResponseRulesBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceHTTPResponseRulesBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
ReplaceHTTPResponseRulesDefault General Error

swagger:response replaceHttpResponseRulesDefault
*/
type ReplaceHTTPResponseRulesDefault struct {
	_statusCode int
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceHTTPResponseRulesDefault creates ReplaceHTTPResponseRulesDefault with default headers values
func NewReplaceHTTPResponseRulesDefault(code int) *ReplaceHTTPResponseRulesDefault {
	if code <= 0 {
		code = 500
	}

	return &ReplaceHTTPResponseRulesDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the replace HTTP response rules default response
func (o *ReplaceHTTPResponseRulesDefault) WithStatusCode(code int) *ReplaceHTTPResponseRulesDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the replace HTTP response rules default response
func (o *ReplaceHTTPResponseRulesDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithConfigurationVersion adds the configurationVersion to the replace HTTP response rules default response
func (o *ReplaceHTTPResponseRulesDefault) WithConfigurationVersion(configurationVersion string) *ReplaceHTTPResponseRulesDefault {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the replace HTTP response rules default response
func (o *ReplaceHTTPResponseRulesDefault) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the replace HTTP response rules default response
func (o *ReplaceHTTPResponseRulesDefault) WithPayload(payload *models.Error) *ReplaceHTTPResponseRulesDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace HTTP response rules default response
func (o *ReplaceHTTPResponseRulesDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceHTTPResponseRulesDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
