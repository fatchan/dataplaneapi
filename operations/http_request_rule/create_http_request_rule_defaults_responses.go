// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package http_request_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/client-native/v6/models"
)

// CreateHTTPRequestRuleDefaultsCreatedCode is the HTTP code returned for type CreateHTTPRequestRuleDefaultsCreated
const CreateHTTPRequestRuleDefaultsCreatedCode int = 201

/*
CreateHTTPRequestRuleDefaultsCreated HTTP Request Rule created

swagger:response createHttpRequestRuleDefaultsCreated
*/
type CreateHTTPRequestRuleDefaultsCreated struct {

	/*
	  In: Body
	*/
	Payload *models.HTTPRequestRule `json:"body,omitempty"`
}

// NewCreateHTTPRequestRuleDefaultsCreated creates CreateHTTPRequestRuleDefaultsCreated with default headers values
func NewCreateHTTPRequestRuleDefaultsCreated() *CreateHTTPRequestRuleDefaultsCreated {

	return &CreateHTTPRequestRuleDefaultsCreated{}
}

// WithPayload adds the payload to the create Http request rule defaults created response
func (o *CreateHTTPRequestRuleDefaultsCreated) WithPayload(payload *models.HTTPRequestRule) *CreateHTTPRequestRuleDefaultsCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create Http request rule defaults created response
func (o *CreateHTTPRequestRuleDefaultsCreated) SetPayload(payload *models.HTTPRequestRule) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateHTTPRequestRuleDefaultsCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateHTTPRequestRuleDefaultsAcceptedCode is the HTTP code returned for type CreateHTTPRequestRuleDefaultsAccepted
const CreateHTTPRequestRuleDefaultsAcceptedCode int = 202

/*
CreateHTTPRequestRuleDefaultsAccepted Configuration change accepted and reload requested

swagger:response createHttpRequestRuleDefaultsAccepted
*/
type CreateHTTPRequestRuleDefaultsAccepted struct {
	/*ID of the requested reload

	 */
	ReloadID string `json:"Reload-ID"`

	/*
	  In: Body
	*/
	Payload *models.HTTPRequestRule `json:"body,omitempty"`
}

// NewCreateHTTPRequestRuleDefaultsAccepted creates CreateHTTPRequestRuleDefaultsAccepted with default headers values
func NewCreateHTTPRequestRuleDefaultsAccepted() *CreateHTTPRequestRuleDefaultsAccepted {

	return &CreateHTTPRequestRuleDefaultsAccepted{}
}

// WithReloadID adds the reloadId to the create Http request rule defaults accepted response
func (o *CreateHTTPRequestRuleDefaultsAccepted) WithReloadID(reloadID string) *CreateHTTPRequestRuleDefaultsAccepted {
	o.ReloadID = reloadID
	return o
}

// SetReloadID sets the reloadId to the create Http request rule defaults accepted response
func (o *CreateHTTPRequestRuleDefaultsAccepted) SetReloadID(reloadID string) {
	o.ReloadID = reloadID
}

// WithPayload adds the payload to the create Http request rule defaults accepted response
func (o *CreateHTTPRequestRuleDefaultsAccepted) WithPayload(payload *models.HTTPRequestRule) *CreateHTTPRequestRuleDefaultsAccepted {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create Http request rule defaults accepted response
func (o *CreateHTTPRequestRuleDefaultsAccepted) SetPayload(payload *models.HTTPRequestRule) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateHTTPRequestRuleDefaultsAccepted) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Reload-ID

	reloadID := o.ReloadID
	if reloadID != "" {
		rw.Header().Set("Reload-ID", reloadID)
	}

	rw.WriteHeader(202)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateHTTPRequestRuleDefaultsBadRequestCode is the HTTP code returned for type CreateHTTPRequestRuleDefaultsBadRequest
const CreateHTTPRequestRuleDefaultsBadRequestCode int = 400

/*
CreateHTTPRequestRuleDefaultsBadRequest Bad request

swagger:response createHttpRequestRuleDefaultsBadRequest
*/
type CreateHTTPRequestRuleDefaultsBadRequest struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateHTTPRequestRuleDefaultsBadRequest creates CreateHTTPRequestRuleDefaultsBadRequest with default headers values
func NewCreateHTTPRequestRuleDefaultsBadRequest() *CreateHTTPRequestRuleDefaultsBadRequest {

	return &CreateHTTPRequestRuleDefaultsBadRequest{}
}

// WithConfigurationVersion adds the configurationVersion to the create Http request rule defaults bad request response
func (o *CreateHTTPRequestRuleDefaultsBadRequest) WithConfigurationVersion(configurationVersion string) *CreateHTTPRequestRuleDefaultsBadRequest {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the create Http request rule defaults bad request response
func (o *CreateHTTPRequestRuleDefaultsBadRequest) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the create Http request rule defaults bad request response
func (o *CreateHTTPRequestRuleDefaultsBadRequest) WithPayload(payload *models.Error) *CreateHTTPRequestRuleDefaultsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create Http request rule defaults bad request response
func (o *CreateHTTPRequestRuleDefaultsBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateHTTPRequestRuleDefaultsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateHTTPRequestRuleDefaultsConflictCode is the HTTP code returned for type CreateHTTPRequestRuleDefaultsConflict
const CreateHTTPRequestRuleDefaultsConflictCode int = 409

/*
CreateHTTPRequestRuleDefaultsConflict The specified resource already exists

swagger:response createHttpRequestRuleDefaultsConflict
*/
type CreateHTTPRequestRuleDefaultsConflict struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateHTTPRequestRuleDefaultsConflict creates CreateHTTPRequestRuleDefaultsConflict with default headers values
func NewCreateHTTPRequestRuleDefaultsConflict() *CreateHTTPRequestRuleDefaultsConflict {

	return &CreateHTTPRequestRuleDefaultsConflict{}
}

// WithConfigurationVersion adds the configurationVersion to the create Http request rule defaults conflict response
func (o *CreateHTTPRequestRuleDefaultsConflict) WithConfigurationVersion(configurationVersion string) *CreateHTTPRequestRuleDefaultsConflict {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the create Http request rule defaults conflict response
func (o *CreateHTTPRequestRuleDefaultsConflict) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the create Http request rule defaults conflict response
func (o *CreateHTTPRequestRuleDefaultsConflict) WithPayload(payload *models.Error) *CreateHTTPRequestRuleDefaultsConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create Http request rule defaults conflict response
func (o *CreateHTTPRequestRuleDefaultsConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateHTTPRequestRuleDefaultsConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
CreateHTTPRequestRuleDefaultsDefault General Error

swagger:response createHttpRequestRuleDefaultsDefault
*/
type CreateHTTPRequestRuleDefaultsDefault struct {
	_statusCode int
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateHTTPRequestRuleDefaultsDefault creates CreateHTTPRequestRuleDefaultsDefault with default headers values
func NewCreateHTTPRequestRuleDefaultsDefault(code int) *CreateHTTPRequestRuleDefaultsDefault {
	if code <= 0 {
		code = 500
	}

	return &CreateHTTPRequestRuleDefaultsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the create HTTP request rule defaults default response
func (o *CreateHTTPRequestRuleDefaultsDefault) WithStatusCode(code int) *CreateHTTPRequestRuleDefaultsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the create HTTP request rule defaults default response
func (o *CreateHTTPRequestRuleDefaultsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithConfigurationVersion adds the configurationVersion to the create HTTP request rule defaults default response
func (o *CreateHTTPRequestRuleDefaultsDefault) WithConfigurationVersion(configurationVersion string) *CreateHTTPRequestRuleDefaultsDefault {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the create HTTP request rule defaults default response
func (o *CreateHTTPRequestRuleDefaultsDefault) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the create HTTP request rule defaults default response
func (o *CreateHTTPRequestRuleDefaultsDefault) WithPayload(payload *models.Error) *CreateHTTPRequestRuleDefaultsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create HTTP request rule defaults default response
func (o *CreateHTTPRequestRuleDefaultsDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateHTTPRequestRuleDefaultsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
