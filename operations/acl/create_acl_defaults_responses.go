// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package acl

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/client-native/v6/models"
)

// CreateACLDefaultsCreatedCode is the HTTP code returned for type CreateACLDefaultsCreated
const CreateACLDefaultsCreatedCode int = 201

/*
CreateACLDefaultsCreated ACL line created

swagger:response createAclDefaultsCreated
*/
type CreateACLDefaultsCreated struct {

	/*
	  In: Body
	*/
	Payload *models.ACL `json:"body,omitempty"`
}

// NewCreateACLDefaultsCreated creates CreateACLDefaultsCreated with default headers values
func NewCreateACLDefaultsCreated() *CreateACLDefaultsCreated {

	return &CreateACLDefaultsCreated{}
}

// WithPayload adds the payload to the create Acl defaults created response
func (o *CreateACLDefaultsCreated) WithPayload(payload *models.ACL) *CreateACLDefaultsCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create Acl defaults created response
func (o *CreateACLDefaultsCreated) SetPayload(payload *models.ACL) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateACLDefaultsCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateACLDefaultsAcceptedCode is the HTTP code returned for type CreateACLDefaultsAccepted
const CreateACLDefaultsAcceptedCode int = 202

/*
CreateACLDefaultsAccepted Configuration change accepted and reload requested

swagger:response createAclDefaultsAccepted
*/
type CreateACLDefaultsAccepted struct {
	/*ID of the requested reload

	 */
	ReloadID string `json:"Reload-ID"`

	/*
	  In: Body
	*/
	Payload *models.ACL `json:"body,omitempty"`
}

// NewCreateACLDefaultsAccepted creates CreateACLDefaultsAccepted with default headers values
func NewCreateACLDefaultsAccepted() *CreateACLDefaultsAccepted {

	return &CreateACLDefaultsAccepted{}
}

// WithReloadID adds the reloadId to the create Acl defaults accepted response
func (o *CreateACLDefaultsAccepted) WithReloadID(reloadID string) *CreateACLDefaultsAccepted {
	o.ReloadID = reloadID
	return o
}

// SetReloadID sets the reloadId to the create Acl defaults accepted response
func (o *CreateACLDefaultsAccepted) SetReloadID(reloadID string) {
	o.ReloadID = reloadID
}

// WithPayload adds the payload to the create Acl defaults accepted response
func (o *CreateACLDefaultsAccepted) WithPayload(payload *models.ACL) *CreateACLDefaultsAccepted {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create Acl defaults accepted response
func (o *CreateACLDefaultsAccepted) SetPayload(payload *models.ACL) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateACLDefaultsAccepted) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Reload-ID

	reloadID := o.ReloadID
	if reloadID != "" {
		rw.Header().Set("Reload-ID", reloadID)
	}

	rw.WriteHeader(202)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateACLDefaultsBadRequestCode is the HTTP code returned for type CreateACLDefaultsBadRequest
const CreateACLDefaultsBadRequestCode int = 400

/*
CreateACLDefaultsBadRequest Bad request

swagger:response createAclDefaultsBadRequest
*/
type CreateACLDefaultsBadRequest struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateACLDefaultsBadRequest creates CreateACLDefaultsBadRequest with default headers values
func NewCreateACLDefaultsBadRequest() *CreateACLDefaultsBadRequest {

	return &CreateACLDefaultsBadRequest{}
}

// WithConfigurationVersion adds the configurationVersion to the create Acl defaults bad request response
func (o *CreateACLDefaultsBadRequest) WithConfigurationVersion(configurationVersion string) *CreateACLDefaultsBadRequest {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the create Acl defaults bad request response
func (o *CreateACLDefaultsBadRequest) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the create Acl defaults bad request response
func (o *CreateACLDefaultsBadRequest) WithPayload(payload *models.Error) *CreateACLDefaultsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create Acl defaults bad request response
func (o *CreateACLDefaultsBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateACLDefaultsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateACLDefaultsConflictCode is the HTTP code returned for type CreateACLDefaultsConflict
const CreateACLDefaultsConflictCode int = 409

/*
CreateACLDefaultsConflict The specified resource already exists

swagger:response createAclDefaultsConflict
*/
type CreateACLDefaultsConflict struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateACLDefaultsConflict creates CreateACLDefaultsConflict with default headers values
func NewCreateACLDefaultsConflict() *CreateACLDefaultsConflict {

	return &CreateACLDefaultsConflict{}
}

// WithConfigurationVersion adds the configurationVersion to the create Acl defaults conflict response
func (o *CreateACLDefaultsConflict) WithConfigurationVersion(configurationVersion string) *CreateACLDefaultsConflict {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the create Acl defaults conflict response
func (o *CreateACLDefaultsConflict) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the create Acl defaults conflict response
func (o *CreateACLDefaultsConflict) WithPayload(payload *models.Error) *CreateACLDefaultsConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create Acl defaults conflict response
func (o *CreateACLDefaultsConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateACLDefaultsConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
CreateACLDefaultsDefault General Error

swagger:response createAclDefaultsDefault
*/
type CreateACLDefaultsDefault struct {
	_statusCode int
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateACLDefaultsDefault creates CreateACLDefaultsDefault with default headers values
func NewCreateACLDefaultsDefault(code int) *CreateACLDefaultsDefault {
	if code <= 0 {
		code = 500
	}

	return &CreateACLDefaultsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the create Acl defaults default response
func (o *CreateACLDefaultsDefault) WithStatusCode(code int) *CreateACLDefaultsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the create Acl defaults default response
func (o *CreateACLDefaultsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithConfigurationVersion adds the configurationVersion to the create Acl defaults default response
func (o *CreateACLDefaultsDefault) WithConfigurationVersion(configurationVersion string) *CreateACLDefaultsDefault {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the create Acl defaults default response
func (o *CreateACLDefaultsDefault) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the create Acl defaults default response
func (o *CreateACLDefaultsDefault) WithPayload(payload *models.Error) *CreateACLDefaultsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create Acl defaults default response
func (o *CreateACLDefaultsDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateACLDefaultsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
