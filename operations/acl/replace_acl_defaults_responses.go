// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package acl

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/client-native/v6/models"
)

// ReplaceACLDefaultsOKCode is the HTTP code returned for type ReplaceACLDefaultsOK
const ReplaceACLDefaultsOKCode int = 200

/*
ReplaceACLDefaultsOK ACL line replaced

swagger:response replaceAclDefaultsOK
*/
type ReplaceACLDefaultsOK struct {

	/*
	  In: Body
	*/
	Payload *models.ACL `json:"body,omitempty"`
}

// NewReplaceACLDefaultsOK creates ReplaceACLDefaultsOK with default headers values
func NewReplaceACLDefaultsOK() *ReplaceACLDefaultsOK {

	return &ReplaceACLDefaultsOK{}
}

// WithPayload adds the payload to the replace Acl defaults o k response
func (o *ReplaceACLDefaultsOK) WithPayload(payload *models.ACL) *ReplaceACLDefaultsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Acl defaults o k response
func (o *ReplaceACLDefaultsOK) SetPayload(payload *models.ACL) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceACLDefaultsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceACLDefaultsAcceptedCode is the HTTP code returned for type ReplaceACLDefaultsAccepted
const ReplaceACLDefaultsAcceptedCode int = 202

/*
ReplaceACLDefaultsAccepted Configuration change accepted and reload requested

swagger:response replaceAclDefaultsAccepted
*/
type ReplaceACLDefaultsAccepted struct {
	/*ID of the requested reload

	 */
	ReloadID string `json:"Reload-ID"`

	/*
	  In: Body
	*/
	Payload *models.ACL `json:"body,omitempty"`
}

// NewReplaceACLDefaultsAccepted creates ReplaceACLDefaultsAccepted with default headers values
func NewReplaceACLDefaultsAccepted() *ReplaceACLDefaultsAccepted {

	return &ReplaceACLDefaultsAccepted{}
}

// WithReloadID adds the reloadId to the replace Acl defaults accepted response
func (o *ReplaceACLDefaultsAccepted) WithReloadID(reloadID string) *ReplaceACLDefaultsAccepted {
	o.ReloadID = reloadID
	return o
}

// SetReloadID sets the reloadId to the replace Acl defaults accepted response
func (o *ReplaceACLDefaultsAccepted) SetReloadID(reloadID string) {
	o.ReloadID = reloadID
}

// WithPayload adds the payload to the replace Acl defaults accepted response
func (o *ReplaceACLDefaultsAccepted) WithPayload(payload *models.ACL) *ReplaceACLDefaultsAccepted {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Acl defaults accepted response
func (o *ReplaceACLDefaultsAccepted) SetPayload(payload *models.ACL) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceACLDefaultsAccepted) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Reload-ID

	reloadID := o.ReloadID
	if reloadID != "" {
		rw.Header().Set("Reload-ID", reloadID)
	}

	rw.WriteHeader(202)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceACLDefaultsBadRequestCode is the HTTP code returned for type ReplaceACLDefaultsBadRequest
const ReplaceACLDefaultsBadRequestCode int = 400

/*
ReplaceACLDefaultsBadRequest Bad request

swagger:response replaceAclDefaultsBadRequest
*/
type ReplaceACLDefaultsBadRequest struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceACLDefaultsBadRequest creates ReplaceACLDefaultsBadRequest with default headers values
func NewReplaceACLDefaultsBadRequest() *ReplaceACLDefaultsBadRequest {

	return &ReplaceACLDefaultsBadRequest{}
}

// WithConfigurationVersion adds the configurationVersion to the replace Acl defaults bad request response
func (o *ReplaceACLDefaultsBadRequest) WithConfigurationVersion(configurationVersion string) *ReplaceACLDefaultsBadRequest {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the replace Acl defaults bad request response
func (o *ReplaceACLDefaultsBadRequest) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the replace Acl defaults bad request response
func (o *ReplaceACLDefaultsBadRequest) WithPayload(payload *models.Error) *ReplaceACLDefaultsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Acl defaults bad request response
func (o *ReplaceACLDefaultsBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceACLDefaultsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceACLDefaultsNotFoundCode is the HTTP code returned for type ReplaceACLDefaultsNotFound
const ReplaceACLDefaultsNotFoundCode int = 404

/*
ReplaceACLDefaultsNotFound The specified resource was not found

swagger:response replaceAclDefaultsNotFound
*/
type ReplaceACLDefaultsNotFound struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceACLDefaultsNotFound creates ReplaceACLDefaultsNotFound with default headers values
func NewReplaceACLDefaultsNotFound() *ReplaceACLDefaultsNotFound {

	return &ReplaceACLDefaultsNotFound{}
}

// WithConfigurationVersion adds the configurationVersion to the replace Acl defaults not found response
func (o *ReplaceACLDefaultsNotFound) WithConfigurationVersion(configurationVersion string) *ReplaceACLDefaultsNotFound {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the replace Acl defaults not found response
func (o *ReplaceACLDefaultsNotFound) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the replace Acl defaults not found response
func (o *ReplaceACLDefaultsNotFound) WithPayload(payload *models.Error) *ReplaceACLDefaultsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Acl defaults not found response
func (o *ReplaceACLDefaultsNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceACLDefaultsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
ReplaceACLDefaultsDefault General Error

swagger:response replaceAclDefaultsDefault
*/
type ReplaceACLDefaultsDefault struct {
	_statusCode int
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceACLDefaultsDefault creates ReplaceACLDefaultsDefault with default headers values
func NewReplaceACLDefaultsDefault(code int) *ReplaceACLDefaultsDefault {
	if code <= 0 {
		code = 500
	}

	return &ReplaceACLDefaultsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the replace Acl defaults default response
func (o *ReplaceACLDefaultsDefault) WithStatusCode(code int) *ReplaceACLDefaultsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the replace Acl defaults default response
func (o *ReplaceACLDefaultsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithConfigurationVersion adds the configurationVersion to the replace Acl defaults default response
func (o *ReplaceACLDefaultsDefault) WithConfigurationVersion(configurationVersion string) *ReplaceACLDefaultsDefault {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the replace Acl defaults default response
func (o *ReplaceACLDefaultsDefault) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the replace Acl defaults default response
func (o *ReplaceACLDefaultsDefault) WithPayload(payload *models.Error) *ReplaceACLDefaultsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Acl defaults default response
func (o *ReplaceACLDefaultsDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceACLDefaultsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
