// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package acme

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/client-native/v6/models"
)

// CreateAcmeProviderCreatedCode is the HTTP code returned for type CreateAcmeProviderCreated
const CreateAcmeProviderCreatedCode int = 201

/*
CreateAcmeProviderCreated Log Profile created

swagger:response createAcmeProviderCreated
*/
type CreateAcmeProviderCreated struct {

	/*
	  In: Body
	*/
	Payload *models.AcmeProvider `json:"body,omitempty"`
}

// NewCreateAcmeProviderCreated creates CreateAcmeProviderCreated with default headers values
func NewCreateAcmeProviderCreated() *CreateAcmeProviderCreated {

	return &CreateAcmeProviderCreated{}
}

// WithPayload adds the payload to the create acme provider created response
func (o *CreateAcmeProviderCreated) WithPayload(payload *models.AcmeProvider) *CreateAcmeProviderCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create acme provider created response
func (o *CreateAcmeProviderCreated) SetPayload(payload *models.AcmeProvider) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateAcmeProviderCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateAcmeProviderAcceptedCode is the HTTP code returned for type CreateAcmeProviderAccepted
const CreateAcmeProviderAcceptedCode int = 202

/*
CreateAcmeProviderAccepted Configuration change accepted and reload requested

swagger:response createAcmeProviderAccepted
*/
type CreateAcmeProviderAccepted struct {
	/*ID of the requested reload

	 */
	ReloadID string `json:"Reload-ID"`

	/*
	  In: Body
	*/
	Payload *models.AcmeProvider `json:"body,omitempty"`
}

// NewCreateAcmeProviderAccepted creates CreateAcmeProviderAccepted with default headers values
func NewCreateAcmeProviderAccepted() *CreateAcmeProviderAccepted {

	return &CreateAcmeProviderAccepted{}
}

// WithReloadID adds the reloadId to the create acme provider accepted response
func (o *CreateAcmeProviderAccepted) WithReloadID(reloadID string) *CreateAcmeProviderAccepted {
	o.ReloadID = reloadID
	return o
}

// SetReloadID sets the reloadId to the create acme provider accepted response
func (o *CreateAcmeProviderAccepted) SetReloadID(reloadID string) {
	o.ReloadID = reloadID
}

// WithPayload adds the payload to the create acme provider accepted response
func (o *CreateAcmeProviderAccepted) WithPayload(payload *models.AcmeProvider) *CreateAcmeProviderAccepted {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create acme provider accepted response
func (o *CreateAcmeProviderAccepted) SetPayload(payload *models.AcmeProvider) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateAcmeProviderAccepted) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Reload-ID

	reloadID := o.ReloadID
	if reloadID != "" {
		rw.Header().Set("Reload-ID", reloadID)
	}

	rw.WriteHeader(202)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateAcmeProviderBadRequestCode is the HTTP code returned for type CreateAcmeProviderBadRequest
const CreateAcmeProviderBadRequestCode int = 400

/*
CreateAcmeProviderBadRequest Bad request

swagger:response createAcmeProviderBadRequest
*/
type CreateAcmeProviderBadRequest struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateAcmeProviderBadRequest creates CreateAcmeProviderBadRequest with default headers values
func NewCreateAcmeProviderBadRequest() *CreateAcmeProviderBadRequest {

	return &CreateAcmeProviderBadRequest{}
}

// WithConfigurationVersion adds the configurationVersion to the create acme provider bad request response
func (o *CreateAcmeProviderBadRequest) WithConfigurationVersion(configurationVersion string) *CreateAcmeProviderBadRequest {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the create acme provider bad request response
func (o *CreateAcmeProviderBadRequest) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the create acme provider bad request response
func (o *CreateAcmeProviderBadRequest) WithPayload(payload *models.Error) *CreateAcmeProviderBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create acme provider bad request response
func (o *CreateAcmeProviderBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateAcmeProviderBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateAcmeProviderConflictCode is the HTTP code returned for type CreateAcmeProviderConflict
const CreateAcmeProviderConflictCode int = 409

/*
CreateAcmeProviderConflict The specified resource already exists

swagger:response createAcmeProviderConflict
*/
type CreateAcmeProviderConflict struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateAcmeProviderConflict creates CreateAcmeProviderConflict with default headers values
func NewCreateAcmeProviderConflict() *CreateAcmeProviderConflict {

	return &CreateAcmeProviderConflict{}
}

// WithConfigurationVersion adds the configurationVersion to the create acme provider conflict response
func (o *CreateAcmeProviderConflict) WithConfigurationVersion(configurationVersion string) *CreateAcmeProviderConflict {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the create acme provider conflict response
func (o *CreateAcmeProviderConflict) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the create acme provider conflict response
func (o *CreateAcmeProviderConflict) WithPayload(payload *models.Error) *CreateAcmeProviderConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create acme provider conflict response
func (o *CreateAcmeProviderConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateAcmeProviderConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
CreateAcmeProviderDefault General Error

swagger:response createAcmeProviderDefault
*/
type CreateAcmeProviderDefault struct {
	_statusCode int
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateAcmeProviderDefault creates CreateAcmeProviderDefault with default headers values
func NewCreateAcmeProviderDefault(code int) *CreateAcmeProviderDefault {
	if code <= 0 {
		code = 500
	}

	return &CreateAcmeProviderDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the create acme provider default response
func (o *CreateAcmeProviderDefault) WithStatusCode(code int) *CreateAcmeProviderDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the create acme provider default response
func (o *CreateAcmeProviderDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithConfigurationVersion adds the configurationVersion to the create acme provider default response
func (o *CreateAcmeProviderDefault) WithConfigurationVersion(configurationVersion string) *CreateAcmeProviderDefault {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the create acme provider default response
func (o *CreateAcmeProviderDefault) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the create acme provider default response
func (o *CreateAcmeProviderDefault) WithPayload(payload *models.Error) *CreateAcmeProviderDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create acme provider default response
func (o *CreateAcmeProviderDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateAcmeProviderDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
