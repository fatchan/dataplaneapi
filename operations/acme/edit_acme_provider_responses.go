// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package acme

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/client-native/v6/models"
)

// EditAcmeProviderOKCode is the HTTP code returned for type EditAcmeProviderOK
const EditAcmeProviderOKCode int = 200

/*
EditAcmeProviderOK acme_provider configuration updated

swagger:response editAcmeProviderOK
*/
type EditAcmeProviderOK struct {

	/*
	  In: Body
	*/
	Payload *models.AcmeProvider `json:"body,omitempty"`
}

// NewEditAcmeProviderOK creates EditAcmeProviderOK with default headers values
func NewEditAcmeProviderOK() *EditAcmeProviderOK {

	return &EditAcmeProviderOK{}
}

// WithPayload adds the payload to the edit acme provider o k response
func (o *EditAcmeProviderOK) WithPayload(payload *models.AcmeProvider) *EditAcmeProviderOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the edit acme provider o k response
func (o *EditAcmeProviderOK) SetPayload(payload *models.AcmeProvider) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EditAcmeProviderOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// EditAcmeProviderAcceptedCode is the HTTP code returned for type EditAcmeProviderAccepted
const EditAcmeProviderAcceptedCode int = 202

/*
EditAcmeProviderAccepted Configuration change accepted and reload requested

swagger:response editAcmeProviderAccepted
*/
type EditAcmeProviderAccepted struct {
	/*ID of the requested reload

	 */
	ReloadID string `json:"Reload-ID"`

	/*
	  In: Body
	*/
	Payload *models.AcmeProvider `json:"body,omitempty"`
}

// NewEditAcmeProviderAccepted creates EditAcmeProviderAccepted with default headers values
func NewEditAcmeProviderAccepted() *EditAcmeProviderAccepted {

	return &EditAcmeProviderAccepted{}
}

// WithReloadID adds the reloadId to the edit acme provider accepted response
func (o *EditAcmeProviderAccepted) WithReloadID(reloadID string) *EditAcmeProviderAccepted {
	o.ReloadID = reloadID
	return o
}

// SetReloadID sets the reloadId to the edit acme provider accepted response
func (o *EditAcmeProviderAccepted) SetReloadID(reloadID string) {
	o.ReloadID = reloadID
}

// WithPayload adds the payload to the edit acme provider accepted response
func (o *EditAcmeProviderAccepted) WithPayload(payload *models.AcmeProvider) *EditAcmeProviderAccepted {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the edit acme provider accepted response
func (o *EditAcmeProviderAccepted) SetPayload(payload *models.AcmeProvider) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EditAcmeProviderAccepted) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Reload-ID

	reloadID := o.ReloadID
	if reloadID != "" {
		rw.Header().Set("Reload-ID", reloadID)
	}

	rw.WriteHeader(202)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// EditAcmeProviderBadRequestCode is the HTTP code returned for type EditAcmeProviderBadRequest
const EditAcmeProviderBadRequestCode int = 400

/*
EditAcmeProviderBadRequest Bad request

swagger:response editAcmeProviderBadRequest
*/
type EditAcmeProviderBadRequest struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewEditAcmeProviderBadRequest creates EditAcmeProviderBadRequest with default headers values
func NewEditAcmeProviderBadRequest() *EditAcmeProviderBadRequest {

	return &EditAcmeProviderBadRequest{}
}

// WithConfigurationVersion adds the configurationVersion to the edit acme provider bad request response
func (o *EditAcmeProviderBadRequest) WithConfigurationVersion(configurationVersion string) *EditAcmeProviderBadRequest {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the edit acme provider bad request response
func (o *EditAcmeProviderBadRequest) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the edit acme provider bad request response
func (o *EditAcmeProviderBadRequest) WithPayload(payload *models.Error) *EditAcmeProviderBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the edit acme provider bad request response
func (o *EditAcmeProviderBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EditAcmeProviderBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// EditAcmeProviderNotFoundCode is the HTTP code returned for type EditAcmeProviderNotFound
const EditAcmeProviderNotFoundCode int = 404

/*
EditAcmeProviderNotFound The specified resource was not found

swagger:response editAcmeProviderNotFound
*/
type EditAcmeProviderNotFound struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewEditAcmeProviderNotFound creates EditAcmeProviderNotFound with default headers values
func NewEditAcmeProviderNotFound() *EditAcmeProviderNotFound {

	return &EditAcmeProviderNotFound{}
}

// WithConfigurationVersion adds the configurationVersion to the edit acme provider not found response
func (o *EditAcmeProviderNotFound) WithConfigurationVersion(configurationVersion string) *EditAcmeProviderNotFound {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the edit acme provider not found response
func (o *EditAcmeProviderNotFound) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the edit acme provider not found response
func (o *EditAcmeProviderNotFound) WithPayload(payload *models.Error) *EditAcmeProviderNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the edit acme provider not found response
func (o *EditAcmeProviderNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EditAcmeProviderNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
EditAcmeProviderDefault General Error

swagger:response editAcmeProviderDefault
*/
type EditAcmeProviderDefault struct {
	_statusCode int
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewEditAcmeProviderDefault creates EditAcmeProviderDefault with default headers values
func NewEditAcmeProviderDefault(code int) *EditAcmeProviderDefault {
	if code <= 0 {
		code = 500
	}

	return &EditAcmeProviderDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the edit acme provider default response
func (o *EditAcmeProviderDefault) WithStatusCode(code int) *EditAcmeProviderDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the edit acme provider default response
func (o *EditAcmeProviderDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithConfigurationVersion adds the configurationVersion to the edit acme provider default response
func (o *EditAcmeProviderDefault) WithConfigurationVersion(configurationVersion string) *EditAcmeProviderDefault {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the edit acme provider default response
func (o *EditAcmeProviderDefault) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the edit acme provider default response
func (o *EditAcmeProviderDefault) WithPayload(payload *models.Error) *EditAcmeProviderDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the edit acme provider default response
func (o *EditAcmeProviderDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EditAcmeProviderDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
