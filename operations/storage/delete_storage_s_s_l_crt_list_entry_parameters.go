// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewDeleteStorageSSLCrtListEntryParams creates a new DeleteStorageSSLCrtListEntryParams object
// with the default values initialized.
func NewDeleteStorageSSLCrtListEntryParams() DeleteStorageSSLCrtListEntryParams {

	var (
		// initialize parameters with default values

		forceReloadDefault = bool(false)
	)

	return DeleteStorageSSLCrtListEntryParams{
		ForceReload: &forceReloadDefault,
	}
}

// DeleteStorageSSLCrtListEntryParams contains all the bound params for the delete storage s s l crt list entry operation
// typically these are obtained from a http.Request
//
// swagger:parameters DeleteStorageSSLCrtListEntry
type DeleteStorageSSLCrtListEntryParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*SSL certificate filename
	  Required: true
	  In: query
	*/
	Certificate string
	/*If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	  In: query
	  Default: false
	*/
	ForceReload *bool
	/*The line number in the crt-list
	  Required: true
	  Minimum: 0
	  In: query
	*/
	LineNumber int64
	/*SSL crt list name
	  Required: true
	  In: path
	*/
	Name string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewDeleteStorageSSLCrtListEntryParams() beforehand.
func (o *DeleteStorageSSLCrtListEntryParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qCertificate, qhkCertificate, _ := qs.GetOK("certificate")
	if err := o.bindCertificate(qCertificate, qhkCertificate, route.Formats); err != nil {
		res = append(res, err)
	}

	qForceReload, qhkForceReload, _ := qs.GetOK("force_reload")
	if err := o.bindForceReload(qForceReload, qhkForceReload, route.Formats); err != nil {
		res = append(res, err)
	}

	qLineNumber, qhkLineNumber, _ := qs.GetOK("line_number")
	if err := o.bindLineNumber(qLineNumber, qhkLineNumber, route.Formats); err != nil {
		res = append(res, err)
	}

	rName, rhkName, _ := route.Params.GetOK("name")
	if err := o.bindName(rName, rhkName, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCertificate binds and validates parameter Certificate from query.
func (o *DeleteStorageSSLCrtListEntryParams) bindCertificate(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("certificate", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("certificate", "query", raw); err != nil {
		return err
	}
	o.Certificate = raw

	return nil
}

// bindForceReload binds and validates parameter ForceReload from query.
func (o *DeleteStorageSSLCrtListEntryParams) bindForceReload(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewDeleteStorageSSLCrtListEntryParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("force_reload", "query", "bool", raw)
	}
	o.ForceReload = &value

	return nil
}

// bindLineNumber binds and validates parameter LineNumber from query.
func (o *DeleteStorageSSLCrtListEntryParams) bindLineNumber(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("line_number", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("line_number", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("line_number", "query", "int64", raw)
	}
	o.LineNumber = value

	if err := o.validateLineNumber(formats); err != nil {
		return err
	}

	return nil
}

// validateLineNumber carries on validations for parameter LineNumber
func (o *DeleteStorageSSLCrtListEntryParams) validateLineNumber(formats strfmt.Registry) error {

	if err := validate.MinimumInt("line_number", "query", o.LineNumber, 0, false); err != nil {
		return err
	}

	return nil
}

// bindName binds and validates parameter Name from path.
func (o *DeleteStorageSSLCrtListEntryParams) bindName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.Name = raw

	return nil
}
