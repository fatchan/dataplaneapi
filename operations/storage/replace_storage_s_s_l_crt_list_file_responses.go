// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/client-native/v6/models"
)

// ReplaceStorageSSLCrtListFileOKCode is the HTTP code returned for type ReplaceStorageSSLCrtListFileOK
const ReplaceStorageSSLCrtListFileOKCode int = 200

/*
ReplaceStorageSSLCrtListFileOK Certificate list replaced

swagger:response replaceStorageSSLCrtListFileOK
*/
type ReplaceStorageSSLCrtListFileOK struct {

	/*
	  In: Body
	*/
	Payload *models.SslCrtListFile `json:"body,omitempty"`
}

// NewReplaceStorageSSLCrtListFileOK creates ReplaceStorageSSLCrtListFileOK with default headers values
func NewReplaceStorageSSLCrtListFileOK() *ReplaceStorageSSLCrtListFileOK {

	return &ReplaceStorageSSLCrtListFileOK{}
}

// WithPayload adds the payload to the replace storage s s l crt list file o k response
func (o *ReplaceStorageSSLCrtListFileOK) WithPayload(payload *models.SslCrtListFile) *ReplaceStorageSSLCrtListFileOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace storage s s l crt list file o k response
func (o *ReplaceStorageSSLCrtListFileOK) SetPayload(payload *models.SslCrtListFile) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceStorageSSLCrtListFileOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceStorageSSLCrtListFileAcceptedCode is the HTTP code returned for type ReplaceStorageSSLCrtListFileAccepted
const ReplaceStorageSSLCrtListFileAcceptedCode int = 202

/*
ReplaceStorageSSLCrtListFileAccepted Certificate list replaced and reload requested

swagger:response replaceStorageSSLCrtListFileAccepted
*/
type ReplaceStorageSSLCrtListFileAccepted struct {
	/*ID of the requested reload

	 */
	ReloadID string `json:"Reload-ID"`

	/*
	  In: Body
	*/
	Payload *models.SslCrtListFile `json:"body,omitempty"`
}

// NewReplaceStorageSSLCrtListFileAccepted creates ReplaceStorageSSLCrtListFileAccepted with default headers values
func NewReplaceStorageSSLCrtListFileAccepted() *ReplaceStorageSSLCrtListFileAccepted {

	return &ReplaceStorageSSLCrtListFileAccepted{}
}

// WithReloadID adds the reloadId to the replace storage s s l crt list file accepted response
func (o *ReplaceStorageSSLCrtListFileAccepted) WithReloadID(reloadID string) *ReplaceStorageSSLCrtListFileAccepted {
	o.ReloadID = reloadID
	return o
}

// SetReloadID sets the reloadId to the replace storage s s l crt list file accepted response
func (o *ReplaceStorageSSLCrtListFileAccepted) SetReloadID(reloadID string) {
	o.ReloadID = reloadID
}

// WithPayload adds the payload to the replace storage s s l crt list file accepted response
func (o *ReplaceStorageSSLCrtListFileAccepted) WithPayload(payload *models.SslCrtListFile) *ReplaceStorageSSLCrtListFileAccepted {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace storage s s l crt list file accepted response
func (o *ReplaceStorageSSLCrtListFileAccepted) SetPayload(payload *models.SslCrtListFile) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceStorageSSLCrtListFileAccepted) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Reload-ID

	reloadID := o.ReloadID
	if reloadID != "" {
		rw.Header().Set("Reload-ID", reloadID)
	}

	rw.WriteHeader(202)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceStorageSSLCrtListFileBadRequestCode is the HTTP code returned for type ReplaceStorageSSLCrtListFileBadRequest
const ReplaceStorageSSLCrtListFileBadRequestCode int = 400

/*
ReplaceStorageSSLCrtListFileBadRequest Bad request

swagger:response replaceStorageSSLCrtListFileBadRequest
*/
type ReplaceStorageSSLCrtListFileBadRequest struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceStorageSSLCrtListFileBadRequest creates ReplaceStorageSSLCrtListFileBadRequest with default headers values
func NewReplaceStorageSSLCrtListFileBadRequest() *ReplaceStorageSSLCrtListFileBadRequest {

	return &ReplaceStorageSSLCrtListFileBadRequest{}
}

// WithConfigurationVersion adds the configurationVersion to the replace storage s s l crt list file bad request response
func (o *ReplaceStorageSSLCrtListFileBadRequest) WithConfigurationVersion(configurationVersion string) *ReplaceStorageSSLCrtListFileBadRequest {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the replace storage s s l crt list file bad request response
func (o *ReplaceStorageSSLCrtListFileBadRequest) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the replace storage s s l crt list file bad request response
func (o *ReplaceStorageSSLCrtListFileBadRequest) WithPayload(payload *models.Error) *ReplaceStorageSSLCrtListFileBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace storage s s l crt list file bad request response
func (o *ReplaceStorageSSLCrtListFileBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceStorageSSLCrtListFileBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceStorageSSLCrtListFileNotFoundCode is the HTTP code returned for type ReplaceStorageSSLCrtListFileNotFound
const ReplaceStorageSSLCrtListFileNotFoundCode int = 404

/*
ReplaceStorageSSLCrtListFileNotFound The specified resource was not found

swagger:response replaceStorageSSLCrtListFileNotFound
*/
type ReplaceStorageSSLCrtListFileNotFound struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceStorageSSLCrtListFileNotFound creates ReplaceStorageSSLCrtListFileNotFound with default headers values
func NewReplaceStorageSSLCrtListFileNotFound() *ReplaceStorageSSLCrtListFileNotFound {

	return &ReplaceStorageSSLCrtListFileNotFound{}
}

// WithConfigurationVersion adds the configurationVersion to the replace storage s s l crt list file not found response
func (o *ReplaceStorageSSLCrtListFileNotFound) WithConfigurationVersion(configurationVersion string) *ReplaceStorageSSLCrtListFileNotFound {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the replace storage s s l crt list file not found response
func (o *ReplaceStorageSSLCrtListFileNotFound) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the replace storage s s l crt list file not found response
func (o *ReplaceStorageSSLCrtListFileNotFound) WithPayload(payload *models.Error) *ReplaceStorageSSLCrtListFileNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace storage s s l crt list file not found response
func (o *ReplaceStorageSSLCrtListFileNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceStorageSSLCrtListFileNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
ReplaceStorageSSLCrtListFileDefault General Error

swagger:response replaceStorageSSLCrtListFileDefault
*/
type ReplaceStorageSSLCrtListFileDefault struct {
	_statusCode int
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceStorageSSLCrtListFileDefault creates ReplaceStorageSSLCrtListFileDefault with default headers values
func NewReplaceStorageSSLCrtListFileDefault(code int) *ReplaceStorageSSLCrtListFileDefault {
	if code <= 0 {
		code = 500
	}

	return &ReplaceStorageSSLCrtListFileDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the replace storage s s l crt list file default response
func (o *ReplaceStorageSSLCrtListFileDefault) WithStatusCode(code int) *ReplaceStorageSSLCrtListFileDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the replace storage s s l crt list file default response
func (o *ReplaceStorageSSLCrtListFileDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithConfigurationVersion adds the configurationVersion to the replace storage s s l crt list file default response
func (o *ReplaceStorageSSLCrtListFileDefault) WithConfigurationVersion(configurationVersion string) *ReplaceStorageSSLCrtListFileDefault {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the replace storage s s l crt list file default response
func (o *ReplaceStorageSSLCrtListFileDefault) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the replace storage s s l crt list file default response
func (o *ReplaceStorageSSLCrtListFileDefault) WithPayload(payload *models.Error) *ReplaceStorageSSLCrtListFileDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace storage s s l crt list file default response
func (o *ReplaceStorageSSLCrtListFileDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceStorageSSLCrtListFileDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
