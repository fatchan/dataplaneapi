// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package http_after_response_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/client-native/v6/models"
)

// DeleteHTTPAfterResponseRuleDefaultsAcceptedCode is the HTTP code returned for type DeleteHTTPAfterResponseRuleDefaultsAccepted
const DeleteHTTPAfterResponseRuleDefaultsAcceptedCode int = 202

/*
DeleteHTTPAfterResponseRuleDefaultsAccepted Configuration change accepted and reload requested

swagger:response deleteHttpAfterResponseRuleDefaultsAccepted
*/
type DeleteHTTPAfterResponseRuleDefaultsAccepted struct {
	/*ID of the requested reload

	 */
	ReloadID string `json:"Reload-ID"`
}

// NewDeleteHTTPAfterResponseRuleDefaultsAccepted creates DeleteHTTPAfterResponseRuleDefaultsAccepted with default headers values
func NewDeleteHTTPAfterResponseRuleDefaultsAccepted() *DeleteHTTPAfterResponseRuleDefaultsAccepted {

	return &DeleteHTTPAfterResponseRuleDefaultsAccepted{}
}

// WithReloadID adds the reloadId to the delete Http after response rule defaults accepted response
func (o *DeleteHTTPAfterResponseRuleDefaultsAccepted) WithReloadID(reloadID string) *DeleteHTTPAfterResponseRuleDefaultsAccepted {
	o.ReloadID = reloadID
	return o
}

// SetReloadID sets the reloadId to the delete Http after response rule defaults accepted response
func (o *DeleteHTTPAfterResponseRuleDefaultsAccepted) SetReloadID(reloadID string) {
	o.ReloadID = reloadID
}

// WriteResponse to the client
func (o *DeleteHTTPAfterResponseRuleDefaultsAccepted) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Reload-ID

	reloadID := o.ReloadID
	if reloadID != "" {
		rw.Header().Set("Reload-ID", reloadID)
	}

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(202)
}

// DeleteHTTPAfterResponseRuleDefaultsNoContentCode is the HTTP code returned for type DeleteHTTPAfterResponseRuleDefaultsNoContent
const DeleteHTTPAfterResponseRuleDefaultsNoContentCode int = 204

/*
DeleteHTTPAfterResponseRuleDefaultsNoContent HTTP After Response Rule deleted

swagger:response deleteHttpAfterResponseRuleDefaultsNoContent
*/
type DeleteHTTPAfterResponseRuleDefaultsNoContent struct {
}

// NewDeleteHTTPAfterResponseRuleDefaultsNoContent creates DeleteHTTPAfterResponseRuleDefaultsNoContent with default headers values
func NewDeleteHTTPAfterResponseRuleDefaultsNoContent() *DeleteHTTPAfterResponseRuleDefaultsNoContent {

	return &DeleteHTTPAfterResponseRuleDefaultsNoContent{}
}

// WriteResponse to the client
func (o *DeleteHTTPAfterResponseRuleDefaultsNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// DeleteHTTPAfterResponseRuleDefaultsNotFoundCode is the HTTP code returned for type DeleteHTTPAfterResponseRuleDefaultsNotFound
const DeleteHTTPAfterResponseRuleDefaultsNotFoundCode int = 404

/*
DeleteHTTPAfterResponseRuleDefaultsNotFound The specified resource was not found

swagger:response deleteHttpAfterResponseRuleDefaultsNotFound
*/
type DeleteHTTPAfterResponseRuleDefaultsNotFound struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteHTTPAfterResponseRuleDefaultsNotFound creates DeleteHTTPAfterResponseRuleDefaultsNotFound with default headers values
func NewDeleteHTTPAfterResponseRuleDefaultsNotFound() *DeleteHTTPAfterResponseRuleDefaultsNotFound {

	return &DeleteHTTPAfterResponseRuleDefaultsNotFound{}
}

// WithConfigurationVersion adds the configurationVersion to the delete Http after response rule defaults not found response
func (o *DeleteHTTPAfterResponseRuleDefaultsNotFound) WithConfigurationVersion(configurationVersion string) *DeleteHTTPAfterResponseRuleDefaultsNotFound {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the delete Http after response rule defaults not found response
func (o *DeleteHTTPAfterResponseRuleDefaultsNotFound) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the delete Http after response rule defaults not found response
func (o *DeleteHTTPAfterResponseRuleDefaultsNotFound) WithPayload(payload *models.Error) *DeleteHTTPAfterResponseRuleDefaultsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete Http after response rule defaults not found response
func (o *DeleteHTTPAfterResponseRuleDefaultsNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteHTTPAfterResponseRuleDefaultsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
DeleteHTTPAfterResponseRuleDefaultsDefault General Error

swagger:response deleteHttpAfterResponseRuleDefaultsDefault
*/
type DeleteHTTPAfterResponseRuleDefaultsDefault struct {
	_statusCode int
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteHTTPAfterResponseRuleDefaultsDefault creates DeleteHTTPAfterResponseRuleDefaultsDefault with default headers values
func NewDeleteHTTPAfterResponseRuleDefaultsDefault(code int) *DeleteHTTPAfterResponseRuleDefaultsDefault {
	if code <= 0 {
		code = 500
	}

	return &DeleteHTTPAfterResponseRuleDefaultsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the delete HTTP after response rule defaults default response
func (o *DeleteHTTPAfterResponseRuleDefaultsDefault) WithStatusCode(code int) *DeleteHTTPAfterResponseRuleDefaultsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the delete HTTP after response rule defaults default response
func (o *DeleteHTTPAfterResponseRuleDefaultsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithConfigurationVersion adds the configurationVersion to the delete HTTP after response rule defaults default response
func (o *DeleteHTTPAfterResponseRuleDefaultsDefault) WithConfigurationVersion(configurationVersion string) *DeleteHTTPAfterResponseRuleDefaultsDefault {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the delete HTTP after response rule defaults default response
func (o *DeleteHTTPAfterResponseRuleDefaultsDefault) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the delete HTTP after response rule defaults default response
func (o *DeleteHTTPAfterResponseRuleDefaultsDefault) WithPayload(payload *models.Error) *DeleteHTTPAfterResponseRuleDefaultsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete HTTP after response rule defaults default response
func (o *DeleteHTTPAfterResponseRuleDefaultsDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteHTTPAfterResponseRuleDefaultsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
