// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package http_after_response_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/client-native/v6/models"
)

// ReplaceHTTPAfterResponseRuleDefaultsOKCode is the HTTP code returned for type ReplaceHTTPAfterResponseRuleDefaultsOK
const ReplaceHTTPAfterResponseRuleDefaultsOKCode int = 200

/*
ReplaceHTTPAfterResponseRuleDefaultsOK HTTP After Response Rule replaced

swagger:response replaceHttpAfterResponseRuleDefaultsOK
*/
type ReplaceHTTPAfterResponseRuleDefaultsOK struct {

	/*
	  In: Body
	*/
	Payload *models.HTTPAfterResponseRule `json:"body,omitempty"`
}

// NewReplaceHTTPAfterResponseRuleDefaultsOK creates ReplaceHTTPAfterResponseRuleDefaultsOK with default headers values
func NewReplaceHTTPAfterResponseRuleDefaultsOK() *ReplaceHTTPAfterResponseRuleDefaultsOK {

	return &ReplaceHTTPAfterResponseRuleDefaultsOK{}
}

// WithPayload adds the payload to the replace Http after response rule defaults o k response
func (o *ReplaceHTTPAfterResponseRuleDefaultsOK) WithPayload(payload *models.HTTPAfterResponseRule) *ReplaceHTTPAfterResponseRuleDefaultsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Http after response rule defaults o k response
func (o *ReplaceHTTPAfterResponseRuleDefaultsOK) SetPayload(payload *models.HTTPAfterResponseRule) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceHTTPAfterResponseRuleDefaultsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceHTTPAfterResponseRuleDefaultsAcceptedCode is the HTTP code returned for type ReplaceHTTPAfterResponseRuleDefaultsAccepted
const ReplaceHTTPAfterResponseRuleDefaultsAcceptedCode int = 202

/*
ReplaceHTTPAfterResponseRuleDefaultsAccepted Configuration change accepted and reload requested

swagger:response replaceHttpAfterResponseRuleDefaultsAccepted
*/
type ReplaceHTTPAfterResponseRuleDefaultsAccepted struct {
	/*ID of the requested reload

	 */
	ReloadID string `json:"Reload-ID"`

	/*
	  In: Body
	*/
	Payload *models.HTTPAfterResponseRule `json:"body,omitempty"`
}

// NewReplaceHTTPAfterResponseRuleDefaultsAccepted creates ReplaceHTTPAfterResponseRuleDefaultsAccepted with default headers values
func NewReplaceHTTPAfterResponseRuleDefaultsAccepted() *ReplaceHTTPAfterResponseRuleDefaultsAccepted {

	return &ReplaceHTTPAfterResponseRuleDefaultsAccepted{}
}

// WithReloadID adds the reloadId to the replace Http after response rule defaults accepted response
func (o *ReplaceHTTPAfterResponseRuleDefaultsAccepted) WithReloadID(reloadID string) *ReplaceHTTPAfterResponseRuleDefaultsAccepted {
	o.ReloadID = reloadID
	return o
}

// SetReloadID sets the reloadId to the replace Http after response rule defaults accepted response
func (o *ReplaceHTTPAfterResponseRuleDefaultsAccepted) SetReloadID(reloadID string) {
	o.ReloadID = reloadID
}

// WithPayload adds the payload to the replace Http after response rule defaults accepted response
func (o *ReplaceHTTPAfterResponseRuleDefaultsAccepted) WithPayload(payload *models.HTTPAfterResponseRule) *ReplaceHTTPAfterResponseRuleDefaultsAccepted {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Http after response rule defaults accepted response
func (o *ReplaceHTTPAfterResponseRuleDefaultsAccepted) SetPayload(payload *models.HTTPAfterResponseRule) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceHTTPAfterResponseRuleDefaultsAccepted) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Reload-ID

	reloadID := o.ReloadID
	if reloadID != "" {
		rw.Header().Set("Reload-ID", reloadID)
	}

	rw.WriteHeader(202)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceHTTPAfterResponseRuleDefaultsBadRequestCode is the HTTP code returned for type ReplaceHTTPAfterResponseRuleDefaultsBadRequest
const ReplaceHTTPAfterResponseRuleDefaultsBadRequestCode int = 400

/*
ReplaceHTTPAfterResponseRuleDefaultsBadRequest Bad request

swagger:response replaceHttpAfterResponseRuleDefaultsBadRequest
*/
type ReplaceHTTPAfterResponseRuleDefaultsBadRequest struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceHTTPAfterResponseRuleDefaultsBadRequest creates ReplaceHTTPAfterResponseRuleDefaultsBadRequest with default headers values
func NewReplaceHTTPAfterResponseRuleDefaultsBadRequest() *ReplaceHTTPAfterResponseRuleDefaultsBadRequest {

	return &ReplaceHTTPAfterResponseRuleDefaultsBadRequest{}
}

// WithConfigurationVersion adds the configurationVersion to the replace Http after response rule defaults bad request response
func (o *ReplaceHTTPAfterResponseRuleDefaultsBadRequest) WithConfigurationVersion(configurationVersion string) *ReplaceHTTPAfterResponseRuleDefaultsBadRequest {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the replace Http after response rule defaults bad request response
func (o *ReplaceHTTPAfterResponseRuleDefaultsBadRequest) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the replace Http after response rule defaults bad request response
func (o *ReplaceHTTPAfterResponseRuleDefaultsBadRequest) WithPayload(payload *models.Error) *ReplaceHTTPAfterResponseRuleDefaultsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Http after response rule defaults bad request response
func (o *ReplaceHTTPAfterResponseRuleDefaultsBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceHTTPAfterResponseRuleDefaultsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceHTTPAfterResponseRuleDefaultsNotFoundCode is the HTTP code returned for type ReplaceHTTPAfterResponseRuleDefaultsNotFound
const ReplaceHTTPAfterResponseRuleDefaultsNotFoundCode int = 404

/*
ReplaceHTTPAfterResponseRuleDefaultsNotFound The specified resource was not found

swagger:response replaceHttpAfterResponseRuleDefaultsNotFound
*/
type ReplaceHTTPAfterResponseRuleDefaultsNotFound struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceHTTPAfterResponseRuleDefaultsNotFound creates ReplaceHTTPAfterResponseRuleDefaultsNotFound with default headers values
func NewReplaceHTTPAfterResponseRuleDefaultsNotFound() *ReplaceHTTPAfterResponseRuleDefaultsNotFound {

	return &ReplaceHTTPAfterResponseRuleDefaultsNotFound{}
}

// WithConfigurationVersion adds the configurationVersion to the replace Http after response rule defaults not found response
func (o *ReplaceHTTPAfterResponseRuleDefaultsNotFound) WithConfigurationVersion(configurationVersion string) *ReplaceHTTPAfterResponseRuleDefaultsNotFound {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the replace Http after response rule defaults not found response
func (o *ReplaceHTTPAfterResponseRuleDefaultsNotFound) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the replace Http after response rule defaults not found response
func (o *ReplaceHTTPAfterResponseRuleDefaultsNotFound) WithPayload(payload *models.Error) *ReplaceHTTPAfterResponseRuleDefaultsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Http after response rule defaults not found response
func (o *ReplaceHTTPAfterResponseRuleDefaultsNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceHTTPAfterResponseRuleDefaultsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
ReplaceHTTPAfterResponseRuleDefaultsDefault General Error

swagger:response replaceHttpAfterResponseRuleDefaultsDefault
*/
type ReplaceHTTPAfterResponseRuleDefaultsDefault struct {
	_statusCode int
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceHTTPAfterResponseRuleDefaultsDefault creates ReplaceHTTPAfterResponseRuleDefaultsDefault with default headers values
func NewReplaceHTTPAfterResponseRuleDefaultsDefault(code int) *ReplaceHTTPAfterResponseRuleDefaultsDefault {
	if code <= 0 {
		code = 500
	}

	return &ReplaceHTTPAfterResponseRuleDefaultsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the replace HTTP after response rule defaults default response
func (o *ReplaceHTTPAfterResponseRuleDefaultsDefault) WithStatusCode(code int) *ReplaceHTTPAfterResponseRuleDefaultsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the replace HTTP after response rule defaults default response
func (o *ReplaceHTTPAfterResponseRuleDefaultsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithConfigurationVersion adds the configurationVersion to the replace HTTP after response rule defaults default response
func (o *ReplaceHTTPAfterResponseRuleDefaultsDefault) WithConfigurationVersion(configurationVersion string) *ReplaceHTTPAfterResponseRuleDefaultsDefault {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the replace HTTP after response rule defaults default response
func (o *ReplaceHTTPAfterResponseRuleDefaultsDefault) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the replace HTTP after response rule defaults default response
func (o *ReplaceHTTPAfterResponseRuleDefaultsDefault) WithPayload(payload *models.Error) *ReplaceHTTPAfterResponseRuleDefaultsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace HTTP after response rule defaults default response
func (o *ReplaceHTTPAfterResponseRuleDefaultsDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceHTTPAfterResponseRuleDefaultsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
