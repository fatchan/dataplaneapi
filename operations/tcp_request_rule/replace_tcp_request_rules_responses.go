// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package tcp_request_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/client-native/v6/models"
)

// ReplaceTCPRequestRulesOKCode is the HTTP code returned for type ReplaceTCPRequestRulesOK
const ReplaceTCPRequestRulesOKCode int = 200

/*
ReplaceTCPRequestRulesOK All TCP Request Rule lines replaced

swagger:response replaceTcpRequestRulesOK
*/
type ReplaceTCPRequestRulesOK struct {

	/*
	  In: Body
	*/
	Payload models.TCPRequestRules `json:"body,omitempty"`
}

// NewReplaceTCPRequestRulesOK creates ReplaceTCPRequestRulesOK with default headers values
func NewReplaceTCPRequestRulesOK() *ReplaceTCPRequestRulesOK {

	return &ReplaceTCPRequestRulesOK{}
}

// WithPayload adds the payload to the replace Tcp request rules o k response
func (o *ReplaceTCPRequestRulesOK) WithPayload(payload models.TCPRequestRules) *ReplaceTCPRequestRulesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Tcp request rules o k response
func (o *ReplaceTCPRequestRulesOK) SetPayload(payload models.TCPRequestRules) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceTCPRequestRulesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = models.TCPRequestRules{}
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ReplaceTCPRequestRulesAcceptedCode is the HTTP code returned for type ReplaceTCPRequestRulesAccepted
const ReplaceTCPRequestRulesAcceptedCode int = 202

/*
ReplaceTCPRequestRulesAccepted Configuration change accepted and reload requested

swagger:response replaceTcpRequestRulesAccepted
*/
type ReplaceTCPRequestRulesAccepted struct {
	/*ID of the requested reload

	 */
	ReloadID string `json:"Reload-ID"`

	/*
	  In: Body
	*/
	Payload models.TCPRequestRules `json:"body,omitempty"`
}

// NewReplaceTCPRequestRulesAccepted creates ReplaceTCPRequestRulesAccepted with default headers values
func NewReplaceTCPRequestRulesAccepted() *ReplaceTCPRequestRulesAccepted {

	return &ReplaceTCPRequestRulesAccepted{}
}

// WithReloadID adds the reloadId to the replace Tcp request rules accepted response
func (o *ReplaceTCPRequestRulesAccepted) WithReloadID(reloadID string) *ReplaceTCPRequestRulesAccepted {
	o.ReloadID = reloadID
	return o
}

// SetReloadID sets the reloadId to the replace Tcp request rules accepted response
func (o *ReplaceTCPRequestRulesAccepted) SetReloadID(reloadID string) {
	o.ReloadID = reloadID
}

// WithPayload adds the payload to the replace Tcp request rules accepted response
func (o *ReplaceTCPRequestRulesAccepted) WithPayload(payload models.TCPRequestRules) *ReplaceTCPRequestRulesAccepted {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Tcp request rules accepted response
func (o *ReplaceTCPRequestRulesAccepted) SetPayload(payload models.TCPRequestRules) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceTCPRequestRulesAccepted) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Reload-ID

	reloadID := o.ReloadID
	if reloadID != "" {
		rw.Header().Set("Reload-ID", reloadID)
	}

	rw.WriteHeader(202)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = models.TCPRequestRules{}
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ReplaceTCPRequestRulesBadRequestCode is the HTTP code returned for type ReplaceTCPRequestRulesBadRequest
const ReplaceTCPRequestRulesBadRequestCode int = 400

/*
ReplaceTCPRequestRulesBadRequest Bad request

swagger:response replaceTcpRequestRulesBadRequest
*/
type ReplaceTCPRequestRulesBadRequest struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceTCPRequestRulesBadRequest creates ReplaceTCPRequestRulesBadRequest with default headers values
func NewReplaceTCPRequestRulesBadRequest() *ReplaceTCPRequestRulesBadRequest {

	return &ReplaceTCPRequestRulesBadRequest{}
}

// WithConfigurationVersion adds the configurationVersion to the replace Tcp request rules bad request response
func (o *ReplaceTCPRequestRulesBadRequest) WithConfigurationVersion(configurationVersion string) *ReplaceTCPRequestRulesBadRequest {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the replace Tcp request rules bad request response
func (o *ReplaceTCPRequestRulesBadRequest) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the replace Tcp request rules bad request response
func (o *ReplaceTCPRequestRulesBadRequest) WithPayload(payload *models.Error) *ReplaceTCPRequestRulesBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Tcp request rules bad request response
func (o *ReplaceTCPRequestRulesBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceTCPRequestRulesBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
ReplaceTCPRequestRulesDefault General Error

swagger:response replaceTcpRequestRulesDefault
*/
type ReplaceTCPRequestRulesDefault struct {
	_statusCode int
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceTCPRequestRulesDefault creates ReplaceTCPRequestRulesDefault with default headers values
func NewReplaceTCPRequestRulesDefault(code int) *ReplaceTCPRequestRulesDefault {
	if code <= 0 {
		code = 500
	}

	return &ReplaceTCPRequestRulesDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the replace TCP request rules default response
func (o *ReplaceTCPRequestRulesDefault) WithStatusCode(code int) *ReplaceTCPRequestRulesDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the replace TCP request rules default response
func (o *ReplaceTCPRequestRulesDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithConfigurationVersion adds the configurationVersion to the replace TCP request rules default response
func (o *ReplaceTCPRequestRulesDefault) WithConfigurationVersion(configurationVersion string) *ReplaceTCPRequestRulesDefault {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the replace TCP request rules default response
func (o *ReplaceTCPRequestRulesDefault) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the replace TCP request rules default response
func (o *ReplaceTCPRequestRulesDefault) WithPayload(payload *models.Error) *ReplaceTCPRequestRulesDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace TCP request rules default response
func (o *ReplaceTCPRequestRulesDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceTCPRequestRulesDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
