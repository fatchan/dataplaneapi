// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package tcp_request_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/client-native/v6/models"
)

// ReplaceTCPRequestRuleDefaultsOKCode is the HTTP code returned for type ReplaceTCPRequestRuleDefaultsOK
const ReplaceTCPRequestRuleDefaultsOKCode int = 200

/*
ReplaceTCPRequestRuleDefaultsOK TCP Request Rule replaced

swagger:response replaceTcpRequestRuleDefaultsOK
*/
type ReplaceTCPRequestRuleDefaultsOK struct {

	/*
	  In: Body
	*/
	Payload *models.TCPRequestRule `json:"body,omitempty"`
}

// NewReplaceTCPRequestRuleDefaultsOK creates ReplaceTCPRequestRuleDefaultsOK with default headers values
func NewReplaceTCPRequestRuleDefaultsOK() *ReplaceTCPRequestRuleDefaultsOK {

	return &ReplaceTCPRequestRuleDefaultsOK{}
}

// WithPayload adds the payload to the replace Tcp request rule defaults o k response
func (o *ReplaceTCPRequestRuleDefaultsOK) WithPayload(payload *models.TCPRequestRule) *ReplaceTCPRequestRuleDefaultsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Tcp request rule defaults o k response
func (o *ReplaceTCPRequestRuleDefaultsOK) SetPayload(payload *models.TCPRequestRule) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceTCPRequestRuleDefaultsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceTCPRequestRuleDefaultsAcceptedCode is the HTTP code returned for type ReplaceTCPRequestRuleDefaultsAccepted
const ReplaceTCPRequestRuleDefaultsAcceptedCode int = 202

/*
ReplaceTCPRequestRuleDefaultsAccepted Configuration change accepted and reload requested

swagger:response replaceTcpRequestRuleDefaultsAccepted
*/
type ReplaceTCPRequestRuleDefaultsAccepted struct {
	/*ID of the requested reload

	 */
	ReloadID string `json:"Reload-ID"`

	/*
	  In: Body
	*/
	Payload *models.TCPRequestRule `json:"body,omitempty"`
}

// NewReplaceTCPRequestRuleDefaultsAccepted creates ReplaceTCPRequestRuleDefaultsAccepted with default headers values
func NewReplaceTCPRequestRuleDefaultsAccepted() *ReplaceTCPRequestRuleDefaultsAccepted {

	return &ReplaceTCPRequestRuleDefaultsAccepted{}
}

// WithReloadID adds the reloadId to the replace Tcp request rule defaults accepted response
func (o *ReplaceTCPRequestRuleDefaultsAccepted) WithReloadID(reloadID string) *ReplaceTCPRequestRuleDefaultsAccepted {
	o.ReloadID = reloadID
	return o
}

// SetReloadID sets the reloadId to the replace Tcp request rule defaults accepted response
func (o *ReplaceTCPRequestRuleDefaultsAccepted) SetReloadID(reloadID string) {
	o.ReloadID = reloadID
}

// WithPayload adds the payload to the replace Tcp request rule defaults accepted response
func (o *ReplaceTCPRequestRuleDefaultsAccepted) WithPayload(payload *models.TCPRequestRule) *ReplaceTCPRequestRuleDefaultsAccepted {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Tcp request rule defaults accepted response
func (o *ReplaceTCPRequestRuleDefaultsAccepted) SetPayload(payload *models.TCPRequestRule) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceTCPRequestRuleDefaultsAccepted) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Reload-ID

	reloadID := o.ReloadID
	if reloadID != "" {
		rw.Header().Set("Reload-ID", reloadID)
	}

	rw.WriteHeader(202)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceTCPRequestRuleDefaultsBadRequestCode is the HTTP code returned for type ReplaceTCPRequestRuleDefaultsBadRequest
const ReplaceTCPRequestRuleDefaultsBadRequestCode int = 400

/*
ReplaceTCPRequestRuleDefaultsBadRequest Bad request

swagger:response replaceTcpRequestRuleDefaultsBadRequest
*/
type ReplaceTCPRequestRuleDefaultsBadRequest struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceTCPRequestRuleDefaultsBadRequest creates ReplaceTCPRequestRuleDefaultsBadRequest with default headers values
func NewReplaceTCPRequestRuleDefaultsBadRequest() *ReplaceTCPRequestRuleDefaultsBadRequest {

	return &ReplaceTCPRequestRuleDefaultsBadRequest{}
}

// WithConfigurationVersion adds the configurationVersion to the replace Tcp request rule defaults bad request response
func (o *ReplaceTCPRequestRuleDefaultsBadRequest) WithConfigurationVersion(configurationVersion string) *ReplaceTCPRequestRuleDefaultsBadRequest {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the replace Tcp request rule defaults bad request response
func (o *ReplaceTCPRequestRuleDefaultsBadRequest) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the replace Tcp request rule defaults bad request response
func (o *ReplaceTCPRequestRuleDefaultsBadRequest) WithPayload(payload *models.Error) *ReplaceTCPRequestRuleDefaultsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Tcp request rule defaults bad request response
func (o *ReplaceTCPRequestRuleDefaultsBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceTCPRequestRuleDefaultsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceTCPRequestRuleDefaultsNotFoundCode is the HTTP code returned for type ReplaceTCPRequestRuleDefaultsNotFound
const ReplaceTCPRequestRuleDefaultsNotFoundCode int = 404

/*
ReplaceTCPRequestRuleDefaultsNotFound The specified resource was not found

swagger:response replaceTcpRequestRuleDefaultsNotFound
*/
type ReplaceTCPRequestRuleDefaultsNotFound struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceTCPRequestRuleDefaultsNotFound creates ReplaceTCPRequestRuleDefaultsNotFound with default headers values
func NewReplaceTCPRequestRuleDefaultsNotFound() *ReplaceTCPRequestRuleDefaultsNotFound {

	return &ReplaceTCPRequestRuleDefaultsNotFound{}
}

// WithConfigurationVersion adds the configurationVersion to the replace Tcp request rule defaults not found response
func (o *ReplaceTCPRequestRuleDefaultsNotFound) WithConfigurationVersion(configurationVersion string) *ReplaceTCPRequestRuleDefaultsNotFound {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the replace Tcp request rule defaults not found response
func (o *ReplaceTCPRequestRuleDefaultsNotFound) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the replace Tcp request rule defaults not found response
func (o *ReplaceTCPRequestRuleDefaultsNotFound) WithPayload(payload *models.Error) *ReplaceTCPRequestRuleDefaultsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Tcp request rule defaults not found response
func (o *ReplaceTCPRequestRuleDefaultsNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceTCPRequestRuleDefaultsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
ReplaceTCPRequestRuleDefaultsDefault General Error

swagger:response replaceTcpRequestRuleDefaultsDefault
*/
type ReplaceTCPRequestRuleDefaultsDefault struct {
	_statusCode int
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceTCPRequestRuleDefaultsDefault creates ReplaceTCPRequestRuleDefaultsDefault with default headers values
func NewReplaceTCPRequestRuleDefaultsDefault(code int) *ReplaceTCPRequestRuleDefaultsDefault {
	if code <= 0 {
		code = 500
	}

	return &ReplaceTCPRequestRuleDefaultsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the replace TCP request rule defaults default response
func (o *ReplaceTCPRequestRuleDefaultsDefault) WithStatusCode(code int) *ReplaceTCPRequestRuleDefaultsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the replace TCP request rule defaults default response
func (o *ReplaceTCPRequestRuleDefaultsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithConfigurationVersion adds the configurationVersion to the replace TCP request rule defaults default response
func (o *ReplaceTCPRequestRuleDefaultsDefault) WithConfigurationVersion(configurationVersion string) *ReplaceTCPRequestRuleDefaultsDefault {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the replace TCP request rule defaults default response
func (o *ReplaceTCPRequestRuleDefaultsDefault) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the replace TCP request rule defaults default response
func (o *ReplaceTCPRequestRuleDefaultsDefault) WithPayload(payload *models.Error) *ReplaceTCPRequestRuleDefaultsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace TCP request rule defaults default response
func (o *ReplaceTCPRequestRuleDefaultsDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceTCPRequestRuleDefaultsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
