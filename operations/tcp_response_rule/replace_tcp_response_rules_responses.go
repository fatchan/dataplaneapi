// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package tcp_response_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/client-native/v6/models"
)

// ReplaceTCPResponseRulesOKCode is the HTTP code returned for type ReplaceTCPResponseRulesOK
const ReplaceTCPResponseRulesOKCode int = 200

/*
ReplaceTCPResponseRulesOK All TCP Response Rule lines replaced

swagger:response replaceTcpResponseRulesOK
*/
type ReplaceTCPResponseRulesOK struct {

	/*
	  In: Body
	*/
	Payload models.TCPResponseRules `json:"body,omitempty"`
}

// NewReplaceTCPResponseRulesOK creates ReplaceTCPResponseRulesOK with default headers values
func NewReplaceTCPResponseRulesOK() *ReplaceTCPResponseRulesOK {

	return &ReplaceTCPResponseRulesOK{}
}

// WithPayload adds the payload to the replace Tcp response rules o k response
func (o *ReplaceTCPResponseRulesOK) WithPayload(payload models.TCPResponseRules) *ReplaceTCPResponseRulesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Tcp response rules o k response
func (o *ReplaceTCPResponseRulesOK) SetPayload(payload models.TCPResponseRules) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceTCPResponseRulesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = models.TCPResponseRules{}
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ReplaceTCPResponseRulesAcceptedCode is the HTTP code returned for type ReplaceTCPResponseRulesAccepted
const ReplaceTCPResponseRulesAcceptedCode int = 202

/*
ReplaceTCPResponseRulesAccepted Configuration change accepted and reload requested

swagger:response replaceTcpResponseRulesAccepted
*/
type ReplaceTCPResponseRulesAccepted struct {
	/*ID of the requested reload

	 */
	ReloadID string `json:"Reload-ID"`

	/*
	  In: Body
	*/
	Payload models.TCPResponseRules `json:"body,omitempty"`
}

// NewReplaceTCPResponseRulesAccepted creates ReplaceTCPResponseRulesAccepted with default headers values
func NewReplaceTCPResponseRulesAccepted() *ReplaceTCPResponseRulesAccepted {

	return &ReplaceTCPResponseRulesAccepted{}
}

// WithReloadID adds the reloadId to the replace Tcp response rules accepted response
func (o *ReplaceTCPResponseRulesAccepted) WithReloadID(reloadID string) *ReplaceTCPResponseRulesAccepted {
	o.ReloadID = reloadID
	return o
}

// SetReloadID sets the reloadId to the replace Tcp response rules accepted response
func (o *ReplaceTCPResponseRulesAccepted) SetReloadID(reloadID string) {
	o.ReloadID = reloadID
}

// WithPayload adds the payload to the replace Tcp response rules accepted response
func (o *ReplaceTCPResponseRulesAccepted) WithPayload(payload models.TCPResponseRules) *ReplaceTCPResponseRulesAccepted {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Tcp response rules accepted response
func (o *ReplaceTCPResponseRulesAccepted) SetPayload(payload models.TCPResponseRules) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceTCPResponseRulesAccepted) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Reload-ID

	reloadID := o.ReloadID
	if reloadID != "" {
		rw.Header().Set("Reload-ID", reloadID)
	}

	rw.WriteHeader(202)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = models.TCPResponseRules{}
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ReplaceTCPResponseRulesBadRequestCode is the HTTP code returned for type ReplaceTCPResponseRulesBadRequest
const ReplaceTCPResponseRulesBadRequestCode int = 400

/*
ReplaceTCPResponseRulesBadRequest Bad request

swagger:response replaceTcpResponseRulesBadRequest
*/
type ReplaceTCPResponseRulesBadRequest struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceTCPResponseRulesBadRequest creates ReplaceTCPResponseRulesBadRequest with default headers values
func NewReplaceTCPResponseRulesBadRequest() *ReplaceTCPResponseRulesBadRequest {

	return &ReplaceTCPResponseRulesBadRequest{}
}

// WithConfigurationVersion adds the configurationVersion to the replace Tcp response rules bad request response
func (o *ReplaceTCPResponseRulesBadRequest) WithConfigurationVersion(configurationVersion string) *ReplaceTCPResponseRulesBadRequest {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the replace Tcp response rules bad request response
func (o *ReplaceTCPResponseRulesBadRequest) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the replace Tcp response rules bad request response
func (o *ReplaceTCPResponseRulesBadRequest) WithPayload(payload *models.Error) *ReplaceTCPResponseRulesBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Tcp response rules bad request response
func (o *ReplaceTCPResponseRulesBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceTCPResponseRulesBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
ReplaceTCPResponseRulesDefault General Error

swagger:response replaceTcpResponseRulesDefault
*/
type ReplaceTCPResponseRulesDefault struct {
	_statusCode int
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceTCPResponseRulesDefault creates ReplaceTCPResponseRulesDefault with default headers values
func NewReplaceTCPResponseRulesDefault(code int) *ReplaceTCPResponseRulesDefault {
	if code <= 0 {
		code = 500
	}

	return &ReplaceTCPResponseRulesDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the replace TCP response rules default response
func (o *ReplaceTCPResponseRulesDefault) WithStatusCode(code int) *ReplaceTCPResponseRulesDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the replace TCP response rules default response
func (o *ReplaceTCPResponseRulesDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithConfigurationVersion adds the configurationVersion to the replace TCP response rules default response
func (o *ReplaceTCPResponseRulesDefault) WithConfigurationVersion(configurationVersion string) *ReplaceTCPResponseRulesDefault {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the replace TCP response rules default response
func (o *ReplaceTCPResponseRulesDefault) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the replace TCP response rules default response
func (o *ReplaceTCPResponseRulesDefault) WithPayload(payload *models.Error) *ReplaceTCPResponseRulesDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace TCP response rules default response
func (o *ReplaceTCPResponseRulesDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceTCPResponseRulesDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
