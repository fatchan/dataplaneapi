// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package tcp_response_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/client-native/v6/models"
)

// ReplaceTCPResponseRuleDefaultsOKCode is the HTTP code returned for type ReplaceTCPResponseRuleDefaultsOK
const ReplaceTCPResponseRuleDefaultsOKCode int = 200

/*
ReplaceTCPResponseRuleDefaultsOK TCP Response Rule replaced

swagger:response replaceTcpResponseRuleDefaultsOK
*/
type ReplaceTCPResponseRuleDefaultsOK struct {

	/*
	  In: Body
	*/
	Payload *models.TCPResponseRule `json:"body,omitempty"`
}

// NewReplaceTCPResponseRuleDefaultsOK creates ReplaceTCPResponseRuleDefaultsOK with default headers values
func NewReplaceTCPResponseRuleDefaultsOK() *ReplaceTCPResponseRuleDefaultsOK {

	return &ReplaceTCPResponseRuleDefaultsOK{}
}

// WithPayload adds the payload to the replace Tcp response rule defaults o k response
func (o *ReplaceTCPResponseRuleDefaultsOK) WithPayload(payload *models.TCPResponseRule) *ReplaceTCPResponseRuleDefaultsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Tcp response rule defaults o k response
func (o *ReplaceTCPResponseRuleDefaultsOK) SetPayload(payload *models.TCPResponseRule) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceTCPResponseRuleDefaultsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceTCPResponseRuleDefaultsAcceptedCode is the HTTP code returned for type ReplaceTCPResponseRuleDefaultsAccepted
const ReplaceTCPResponseRuleDefaultsAcceptedCode int = 202

/*
ReplaceTCPResponseRuleDefaultsAccepted Configuration change accepted and reload requested

swagger:response replaceTcpResponseRuleDefaultsAccepted
*/
type ReplaceTCPResponseRuleDefaultsAccepted struct {
	/*ID of the requested reload

	 */
	ReloadID string `json:"Reload-ID"`

	/*
	  In: Body
	*/
	Payload *models.TCPResponseRule `json:"body,omitempty"`
}

// NewReplaceTCPResponseRuleDefaultsAccepted creates ReplaceTCPResponseRuleDefaultsAccepted with default headers values
func NewReplaceTCPResponseRuleDefaultsAccepted() *ReplaceTCPResponseRuleDefaultsAccepted {

	return &ReplaceTCPResponseRuleDefaultsAccepted{}
}

// WithReloadID adds the reloadId to the replace Tcp response rule defaults accepted response
func (o *ReplaceTCPResponseRuleDefaultsAccepted) WithReloadID(reloadID string) *ReplaceTCPResponseRuleDefaultsAccepted {
	o.ReloadID = reloadID
	return o
}

// SetReloadID sets the reloadId to the replace Tcp response rule defaults accepted response
func (o *ReplaceTCPResponseRuleDefaultsAccepted) SetReloadID(reloadID string) {
	o.ReloadID = reloadID
}

// WithPayload adds the payload to the replace Tcp response rule defaults accepted response
func (o *ReplaceTCPResponseRuleDefaultsAccepted) WithPayload(payload *models.TCPResponseRule) *ReplaceTCPResponseRuleDefaultsAccepted {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Tcp response rule defaults accepted response
func (o *ReplaceTCPResponseRuleDefaultsAccepted) SetPayload(payload *models.TCPResponseRule) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceTCPResponseRuleDefaultsAccepted) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Reload-ID

	reloadID := o.ReloadID
	if reloadID != "" {
		rw.Header().Set("Reload-ID", reloadID)
	}

	rw.WriteHeader(202)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceTCPResponseRuleDefaultsBadRequestCode is the HTTP code returned for type ReplaceTCPResponseRuleDefaultsBadRequest
const ReplaceTCPResponseRuleDefaultsBadRequestCode int = 400

/*
ReplaceTCPResponseRuleDefaultsBadRequest Bad request

swagger:response replaceTcpResponseRuleDefaultsBadRequest
*/
type ReplaceTCPResponseRuleDefaultsBadRequest struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceTCPResponseRuleDefaultsBadRequest creates ReplaceTCPResponseRuleDefaultsBadRequest with default headers values
func NewReplaceTCPResponseRuleDefaultsBadRequest() *ReplaceTCPResponseRuleDefaultsBadRequest {

	return &ReplaceTCPResponseRuleDefaultsBadRequest{}
}

// WithConfigurationVersion adds the configurationVersion to the replace Tcp response rule defaults bad request response
func (o *ReplaceTCPResponseRuleDefaultsBadRequest) WithConfigurationVersion(configurationVersion string) *ReplaceTCPResponseRuleDefaultsBadRequest {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the replace Tcp response rule defaults bad request response
func (o *ReplaceTCPResponseRuleDefaultsBadRequest) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the replace Tcp response rule defaults bad request response
func (o *ReplaceTCPResponseRuleDefaultsBadRequest) WithPayload(payload *models.Error) *ReplaceTCPResponseRuleDefaultsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Tcp response rule defaults bad request response
func (o *ReplaceTCPResponseRuleDefaultsBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceTCPResponseRuleDefaultsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceTCPResponseRuleDefaultsNotFoundCode is the HTTP code returned for type ReplaceTCPResponseRuleDefaultsNotFound
const ReplaceTCPResponseRuleDefaultsNotFoundCode int = 404

/*
ReplaceTCPResponseRuleDefaultsNotFound The specified resource was not found

swagger:response replaceTcpResponseRuleDefaultsNotFound
*/
type ReplaceTCPResponseRuleDefaultsNotFound struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceTCPResponseRuleDefaultsNotFound creates ReplaceTCPResponseRuleDefaultsNotFound with default headers values
func NewReplaceTCPResponseRuleDefaultsNotFound() *ReplaceTCPResponseRuleDefaultsNotFound {

	return &ReplaceTCPResponseRuleDefaultsNotFound{}
}

// WithConfigurationVersion adds the configurationVersion to the replace Tcp response rule defaults not found response
func (o *ReplaceTCPResponseRuleDefaultsNotFound) WithConfigurationVersion(configurationVersion string) *ReplaceTCPResponseRuleDefaultsNotFound {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the replace Tcp response rule defaults not found response
func (o *ReplaceTCPResponseRuleDefaultsNotFound) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the replace Tcp response rule defaults not found response
func (o *ReplaceTCPResponseRuleDefaultsNotFound) WithPayload(payload *models.Error) *ReplaceTCPResponseRuleDefaultsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace Tcp response rule defaults not found response
func (o *ReplaceTCPResponseRuleDefaultsNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceTCPResponseRuleDefaultsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
ReplaceTCPResponseRuleDefaultsDefault General Error

swagger:response replaceTcpResponseRuleDefaultsDefault
*/
type ReplaceTCPResponseRuleDefaultsDefault struct {
	_statusCode int
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceTCPResponseRuleDefaultsDefault creates ReplaceTCPResponseRuleDefaultsDefault with default headers values
func NewReplaceTCPResponseRuleDefaultsDefault(code int) *ReplaceTCPResponseRuleDefaultsDefault {
	if code <= 0 {
		code = 500
	}

	return &ReplaceTCPResponseRuleDefaultsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the replace TCP response rule defaults default response
func (o *ReplaceTCPResponseRuleDefaultsDefault) WithStatusCode(code int) *ReplaceTCPResponseRuleDefaultsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the replace TCP response rule defaults default response
func (o *ReplaceTCPResponseRuleDefaultsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithConfigurationVersion adds the configurationVersion to the replace TCP response rule defaults default response
func (o *ReplaceTCPResponseRuleDefaultsDefault) WithConfigurationVersion(configurationVersion string) *ReplaceTCPResponseRuleDefaultsDefault {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the replace TCP response rule defaults default response
func (o *ReplaceTCPResponseRuleDefaultsDefault) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the replace TCP response rule defaults default response
func (o *ReplaceTCPResponseRuleDefaultsDefault) WithPayload(payload *models.Error) *ReplaceTCPResponseRuleDefaultsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace TCP response rule defaults default response
func (o *ReplaceTCPResponseRuleDefaultsDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceTCPResponseRuleDefaultsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
