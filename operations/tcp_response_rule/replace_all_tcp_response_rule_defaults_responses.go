// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package tcp_response_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/client-native/v6/models"
)

// ReplaceAllTCPResponseRuleDefaultsOKCode is the HTTP code returned for type ReplaceAllTCPResponseRuleDefaultsOK
const ReplaceAllTCPResponseRuleDefaultsOKCode int = 200

/*
ReplaceAllTCPResponseRuleDefaultsOK All TCP Response Rule lines replaced

swagger:response replaceAllTcpResponseRuleDefaultsOK
*/
type ReplaceAllTCPResponseRuleDefaultsOK struct {

	/*
	  In: Body
	*/
	Payload models.TCPResponseRules `json:"body,omitempty"`
}

// NewReplaceAllTCPResponseRuleDefaultsOK creates ReplaceAllTCPResponseRuleDefaultsOK with default headers values
func NewReplaceAllTCPResponseRuleDefaultsOK() *ReplaceAllTCPResponseRuleDefaultsOK {

	return &ReplaceAllTCPResponseRuleDefaultsOK{}
}

// WithPayload adds the payload to the replace all Tcp response rule defaults o k response
func (o *ReplaceAllTCPResponseRuleDefaultsOK) WithPayload(payload models.TCPResponseRules) *ReplaceAllTCPResponseRuleDefaultsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace all Tcp response rule defaults o k response
func (o *ReplaceAllTCPResponseRuleDefaultsOK) SetPayload(payload models.TCPResponseRules) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceAllTCPResponseRuleDefaultsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = models.TCPResponseRules{}
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ReplaceAllTCPResponseRuleDefaultsAcceptedCode is the HTTP code returned for type ReplaceAllTCPResponseRuleDefaultsAccepted
const ReplaceAllTCPResponseRuleDefaultsAcceptedCode int = 202

/*
ReplaceAllTCPResponseRuleDefaultsAccepted Configuration change accepted and reload requested

swagger:response replaceAllTcpResponseRuleDefaultsAccepted
*/
type ReplaceAllTCPResponseRuleDefaultsAccepted struct {
	/*ID of the requested reload

	 */
	ReloadID string `json:"Reload-ID"`

	/*
	  In: Body
	*/
	Payload models.TCPResponseRules `json:"body,omitempty"`
}

// NewReplaceAllTCPResponseRuleDefaultsAccepted creates ReplaceAllTCPResponseRuleDefaultsAccepted with default headers values
func NewReplaceAllTCPResponseRuleDefaultsAccepted() *ReplaceAllTCPResponseRuleDefaultsAccepted {

	return &ReplaceAllTCPResponseRuleDefaultsAccepted{}
}

// WithReloadID adds the reloadId to the replace all Tcp response rule defaults accepted response
func (o *ReplaceAllTCPResponseRuleDefaultsAccepted) WithReloadID(reloadID string) *ReplaceAllTCPResponseRuleDefaultsAccepted {
	o.ReloadID = reloadID
	return o
}

// SetReloadID sets the reloadId to the replace all Tcp response rule defaults accepted response
func (o *ReplaceAllTCPResponseRuleDefaultsAccepted) SetReloadID(reloadID string) {
	o.ReloadID = reloadID
}

// WithPayload adds the payload to the replace all Tcp response rule defaults accepted response
func (o *ReplaceAllTCPResponseRuleDefaultsAccepted) WithPayload(payload models.TCPResponseRules) *ReplaceAllTCPResponseRuleDefaultsAccepted {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace all Tcp response rule defaults accepted response
func (o *ReplaceAllTCPResponseRuleDefaultsAccepted) SetPayload(payload models.TCPResponseRules) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceAllTCPResponseRuleDefaultsAccepted) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Reload-ID

	reloadID := o.ReloadID
	if reloadID != "" {
		rw.Header().Set("Reload-ID", reloadID)
	}

	rw.WriteHeader(202)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = models.TCPResponseRules{}
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ReplaceAllTCPResponseRuleDefaultsBadRequestCode is the HTTP code returned for type ReplaceAllTCPResponseRuleDefaultsBadRequest
const ReplaceAllTCPResponseRuleDefaultsBadRequestCode int = 400

/*
ReplaceAllTCPResponseRuleDefaultsBadRequest Bad request

swagger:response replaceAllTcpResponseRuleDefaultsBadRequest
*/
type ReplaceAllTCPResponseRuleDefaultsBadRequest struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceAllTCPResponseRuleDefaultsBadRequest creates ReplaceAllTCPResponseRuleDefaultsBadRequest with default headers values
func NewReplaceAllTCPResponseRuleDefaultsBadRequest() *ReplaceAllTCPResponseRuleDefaultsBadRequest {

	return &ReplaceAllTCPResponseRuleDefaultsBadRequest{}
}

// WithConfigurationVersion adds the configurationVersion to the replace all Tcp response rule defaults bad request response
func (o *ReplaceAllTCPResponseRuleDefaultsBadRequest) WithConfigurationVersion(configurationVersion string) *ReplaceAllTCPResponseRuleDefaultsBadRequest {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the replace all Tcp response rule defaults bad request response
func (o *ReplaceAllTCPResponseRuleDefaultsBadRequest) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the replace all Tcp response rule defaults bad request response
func (o *ReplaceAllTCPResponseRuleDefaultsBadRequest) WithPayload(payload *models.Error) *ReplaceAllTCPResponseRuleDefaultsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace all Tcp response rule defaults bad request response
func (o *ReplaceAllTCPResponseRuleDefaultsBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceAllTCPResponseRuleDefaultsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
ReplaceAllTCPResponseRuleDefaultsDefault General Error

swagger:response replaceAllTcpResponseRuleDefaultsDefault
*/
type ReplaceAllTCPResponseRuleDefaultsDefault struct {
	_statusCode int
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewReplaceAllTCPResponseRuleDefaultsDefault creates ReplaceAllTCPResponseRuleDefaultsDefault with default headers values
func NewReplaceAllTCPResponseRuleDefaultsDefault(code int) *ReplaceAllTCPResponseRuleDefaultsDefault {
	if code <= 0 {
		code = 500
	}

	return &ReplaceAllTCPResponseRuleDefaultsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the replace all TCP response rule defaults default response
func (o *ReplaceAllTCPResponseRuleDefaultsDefault) WithStatusCode(code int) *ReplaceAllTCPResponseRuleDefaultsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the replace all TCP response rule defaults default response
func (o *ReplaceAllTCPResponseRuleDefaultsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithConfigurationVersion adds the configurationVersion to the replace all TCP response rule defaults default response
func (o *ReplaceAllTCPResponseRuleDefaultsDefault) WithConfigurationVersion(configurationVersion string) *ReplaceAllTCPResponseRuleDefaultsDefault {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the replace all TCP response rule defaults default response
func (o *ReplaceAllTCPResponseRuleDefaultsDefault) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the replace all TCP response rule defaults default response
func (o *ReplaceAllTCPResponseRuleDefaultsDefault) WithPayload(payload *models.Error) *ReplaceAllTCPResponseRuleDefaultsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace all TCP response rule defaults default response
func (o *ReplaceAllTCPResponseRuleDefaultsDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceAllTCPResponseRuleDefaultsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
