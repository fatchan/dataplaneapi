// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package tcp_response_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/haproxytech/client-native/v6/models"
)

// CreateTCPResponseRuleDefaultsCreatedCode is the HTTP code returned for type CreateTCPResponseRuleDefaultsCreated
const CreateTCPResponseRuleDefaultsCreatedCode int = 201

/*
CreateTCPResponseRuleDefaultsCreated TCP Response Rule created

swagger:response createTcpResponseRuleDefaultsCreated
*/
type CreateTCPResponseRuleDefaultsCreated struct {

	/*
	  In: Body
	*/
	Payload *models.TCPResponseRule `json:"body,omitempty"`
}

// NewCreateTCPResponseRuleDefaultsCreated creates CreateTCPResponseRuleDefaultsCreated with default headers values
func NewCreateTCPResponseRuleDefaultsCreated() *CreateTCPResponseRuleDefaultsCreated {

	return &CreateTCPResponseRuleDefaultsCreated{}
}

// WithPayload adds the payload to the create Tcp response rule defaults created response
func (o *CreateTCPResponseRuleDefaultsCreated) WithPayload(payload *models.TCPResponseRule) *CreateTCPResponseRuleDefaultsCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create Tcp response rule defaults created response
func (o *CreateTCPResponseRuleDefaultsCreated) SetPayload(payload *models.TCPResponseRule) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateTCPResponseRuleDefaultsCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateTCPResponseRuleDefaultsAcceptedCode is the HTTP code returned for type CreateTCPResponseRuleDefaultsAccepted
const CreateTCPResponseRuleDefaultsAcceptedCode int = 202

/*
CreateTCPResponseRuleDefaultsAccepted Configuration change accepted and reload requested

swagger:response createTcpResponseRuleDefaultsAccepted
*/
type CreateTCPResponseRuleDefaultsAccepted struct {
	/*ID of the requested reload

	 */
	ReloadID string `json:"Reload-ID"`

	/*
	  In: Body
	*/
	Payload *models.TCPResponseRule `json:"body,omitempty"`
}

// NewCreateTCPResponseRuleDefaultsAccepted creates CreateTCPResponseRuleDefaultsAccepted with default headers values
func NewCreateTCPResponseRuleDefaultsAccepted() *CreateTCPResponseRuleDefaultsAccepted {

	return &CreateTCPResponseRuleDefaultsAccepted{}
}

// WithReloadID adds the reloadId to the create Tcp response rule defaults accepted response
func (o *CreateTCPResponseRuleDefaultsAccepted) WithReloadID(reloadID string) *CreateTCPResponseRuleDefaultsAccepted {
	o.ReloadID = reloadID
	return o
}

// SetReloadID sets the reloadId to the create Tcp response rule defaults accepted response
func (o *CreateTCPResponseRuleDefaultsAccepted) SetReloadID(reloadID string) {
	o.ReloadID = reloadID
}

// WithPayload adds the payload to the create Tcp response rule defaults accepted response
func (o *CreateTCPResponseRuleDefaultsAccepted) WithPayload(payload *models.TCPResponseRule) *CreateTCPResponseRuleDefaultsAccepted {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create Tcp response rule defaults accepted response
func (o *CreateTCPResponseRuleDefaultsAccepted) SetPayload(payload *models.TCPResponseRule) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateTCPResponseRuleDefaultsAccepted) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Reload-ID

	reloadID := o.ReloadID
	if reloadID != "" {
		rw.Header().Set("Reload-ID", reloadID)
	}

	rw.WriteHeader(202)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateTCPResponseRuleDefaultsBadRequestCode is the HTTP code returned for type CreateTCPResponseRuleDefaultsBadRequest
const CreateTCPResponseRuleDefaultsBadRequestCode int = 400

/*
CreateTCPResponseRuleDefaultsBadRequest Bad request

swagger:response createTcpResponseRuleDefaultsBadRequest
*/
type CreateTCPResponseRuleDefaultsBadRequest struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateTCPResponseRuleDefaultsBadRequest creates CreateTCPResponseRuleDefaultsBadRequest with default headers values
func NewCreateTCPResponseRuleDefaultsBadRequest() *CreateTCPResponseRuleDefaultsBadRequest {

	return &CreateTCPResponseRuleDefaultsBadRequest{}
}

// WithConfigurationVersion adds the configurationVersion to the create Tcp response rule defaults bad request response
func (o *CreateTCPResponseRuleDefaultsBadRequest) WithConfigurationVersion(configurationVersion string) *CreateTCPResponseRuleDefaultsBadRequest {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the create Tcp response rule defaults bad request response
func (o *CreateTCPResponseRuleDefaultsBadRequest) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the create Tcp response rule defaults bad request response
func (o *CreateTCPResponseRuleDefaultsBadRequest) WithPayload(payload *models.Error) *CreateTCPResponseRuleDefaultsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create Tcp response rule defaults bad request response
func (o *CreateTCPResponseRuleDefaultsBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateTCPResponseRuleDefaultsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateTCPResponseRuleDefaultsConflictCode is the HTTP code returned for type CreateTCPResponseRuleDefaultsConflict
const CreateTCPResponseRuleDefaultsConflictCode int = 409

/*
CreateTCPResponseRuleDefaultsConflict The specified resource already exists

swagger:response createTcpResponseRuleDefaultsConflict
*/
type CreateTCPResponseRuleDefaultsConflict struct {
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateTCPResponseRuleDefaultsConflict creates CreateTCPResponseRuleDefaultsConflict with default headers values
func NewCreateTCPResponseRuleDefaultsConflict() *CreateTCPResponseRuleDefaultsConflict {

	return &CreateTCPResponseRuleDefaultsConflict{}
}

// WithConfigurationVersion adds the configurationVersion to the create Tcp response rule defaults conflict response
func (o *CreateTCPResponseRuleDefaultsConflict) WithConfigurationVersion(configurationVersion string) *CreateTCPResponseRuleDefaultsConflict {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the create Tcp response rule defaults conflict response
func (o *CreateTCPResponseRuleDefaultsConflict) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the create Tcp response rule defaults conflict response
func (o *CreateTCPResponseRuleDefaultsConflict) WithPayload(payload *models.Error) *CreateTCPResponseRuleDefaultsConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create Tcp response rule defaults conflict response
func (o *CreateTCPResponseRuleDefaultsConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateTCPResponseRuleDefaultsConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
CreateTCPResponseRuleDefaultsDefault General Error

swagger:response createTcpResponseRuleDefaultsDefault
*/
type CreateTCPResponseRuleDefaultsDefault struct {
	_statusCode int
	/*Configuration file version

	 */
	ConfigurationVersion string `json:"Configuration-Version"`

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateTCPResponseRuleDefaultsDefault creates CreateTCPResponseRuleDefaultsDefault with default headers values
func NewCreateTCPResponseRuleDefaultsDefault(code int) *CreateTCPResponseRuleDefaultsDefault {
	if code <= 0 {
		code = 500
	}

	return &CreateTCPResponseRuleDefaultsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the create TCP response rule defaults default response
func (o *CreateTCPResponseRuleDefaultsDefault) WithStatusCode(code int) *CreateTCPResponseRuleDefaultsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the create TCP response rule defaults default response
func (o *CreateTCPResponseRuleDefaultsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithConfigurationVersion adds the configurationVersion to the create TCP response rule defaults default response
func (o *CreateTCPResponseRuleDefaultsDefault) WithConfigurationVersion(configurationVersion string) *CreateTCPResponseRuleDefaultsDefault {
	o.ConfigurationVersion = configurationVersion
	return o
}

// SetConfigurationVersion sets the configurationVersion to the create TCP response rule defaults default response
func (o *CreateTCPResponseRuleDefaultsDefault) SetConfigurationVersion(configurationVersion string) {
	o.ConfigurationVersion = configurationVersion
}

// WithPayload adds the payload to the create TCP response rule defaults default response
func (o *CreateTCPResponseRuleDefaultsDefault) WithPayload(payload *models.Error) *CreateTCPResponseRuleDefaultsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create TCP response rule defaults default response
func (o *CreateTCPResponseRuleDefaultsDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateTCPResponseRuleDefaultsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Configuration-Version

	configurationVersion := o.ConfigurationVersion
	if configurationVersion != "" {
		rw.Header().Set("Configuration-Version", configurationVersion)
	}

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
