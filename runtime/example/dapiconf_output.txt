&configuration.Configuration{
    Cluster: configuration.ClusterConfiguration{
        APIRegisterPath:    configuration.AtomicString{},
        APIBasePath:        configuration.AtomicString{},
        ActiveBootstrapKey: configuration.AtomicString{},
        Token:              configuration.AtomicString{},
        ID:                 configuration.AtomicString{
            value: atomic.Value{
                v:  "cluster123456",
            },
        },
        Port: configuration.AtomicInt{
            value: atomic.Value{
                v:  int(80),
            },
        },
        BootstrapKey:       configuration.AtomicString{},
        APINodesPath:       configuration.AtomicString{},
        URL:                configuration.AtomicString{},
        StorageDir:         configuration.AtomicString{},
        CertificateDir:     configuration.AtomicString{},
        CertificateFetched: configuration.AtomicBool{},
        Name:               configuration.AtomicString{
            value: atomic.Value{
                v:  "cluster777Name",
            },
        },
        Description:       configuration.AtomicString{},
        ClusterID:         configuration.AtomicString{},
        ClusterLogTargets: nil,
    },
    Notify: configuration.NotifyConfiguration{
        BootstrapKeyChanged: &configuration.ChanNotify{
            subscribers: {"monitorBootstrapKey":0xc000e4be60},
            mu:          sync.RWMutex{},
        },
        ServerStarted: &configuration.ChanNotify{
            subscribers: {"clusterMonitor":0xc000e4be00},
            mu:          sync.RWMutex{},
        },
        CertificateRefresh: &configuration.ChanNotify{
            subscribers: {"monitorCertificateRefresh":0xc000e4bec0},
            mu:          sync.RWMutex{},
        },
        Reload: &configuration.ChanNotify{
            subscribers: {"main":0xc001916060},
            mu:          sync.RWMutex{},
        },
        Shutdown: &configuration.ChanNotify{
            subscribers: {"main":0xc001988000},
            mu:          sync.RWMutex{},
        },
    },
    Mode: configuration.AtomicString{
        value: atomic.Value{
            v:  "cluster",
        },
    },
    storage: &configuration.StorageYML{
        cfg: &configuration.StorageDataplaneAPIConfiguration{
            Version:                &int(2),
            Name:                   &"famous_condor",
            Mode:                   &"cluster",
            DeprecatedBootstrapKey: (*string)(nil),
            Status:                 &"",
            Dataplaneapi:           &configuration.configTypeDataplaneapi{
                WriteTimeout:    &"60s",
                GracefulTimeout: &"15s",
                ShowSystemInfo:  &bool(false),
                MaxHeaderSize:   &"1MiB",
                SocketPath:      &"/var/run/data-plane.sock",
                DebugSocketPath: &"/home/helene/go/src/gitlab.int.haproxy.com/dataplaneapi/.test/dataplane-debug.sock",
                Host:            &"localhost",
                Port:            &int(80),
                ListenLimit:     &int(1024),
                DisableInotify:  &bool(false),
                ReadTimeout:     &"30s",
                Advertised:      &configuration.configTypeAdvertised{
                    APIAddress: &"10.2.3.4",
                    APIPort:    &int64(80),
                },
                CleanupTimeout: &"10s",
                KeepAlive:      &"3m",
                PIDFile:        &"/tmp/dataplane.pid",
                UID:            (*int)(nil),
                GID:            (*int)(nil),
                TLS:            &configuration.configTypeTLS{
                    TLSHost:           (*string)(nil),
                    TLSPort:           &int(6443),
                    TLSCertificate:    (*flags.Filename)(nil),
                    TLSCertificateKey: (*flags.Filename)(nil),
                    TLSCACertificate:  (*flags.Filename)(nil),
                    TLSListenLimit:    &int(10),
                    TLSKeepAlive:      &"1m",
                    TLSReadTimeout:    &"10s",
                    TLSWriteTimeout:   &"10s",
                },
                EnabledListeners: &[]string{"http"},
                Userlist:         &configuration.configTypeUserlist{
                    Userlist:     &"controller",
                    UserListFile: (*string)(nil),
                },
                Transaction: &configuration.configTypeTransaction{
                    TransactionDir:      &"/tmp/haproxy",
                    BackupsNumber:       &int(0),
                    BackupsDir:          &"/tmp/backups",
                    MaxOpenTransactions: &int64(20),
                },
                Resources: &configuration.configTypeResources{
                    MapsDir:              &"/etc/haproxy/maps",
                    SSLCertsDir:          &"/etc/haproxy/ssl",
                    GeneralStorageDir:    (*string)(nil),
                    UpdateMapFiles:       &bool(false),
                    UpdateMapFilesPeriod: &int64(10),
                    SpoeDir:              &"/etc/haproxy/spoe",
                    SpoeTransactionDir:   &"/tmp/spoe-haproxy",
                },
                User: {
                    {
                        Name:     "admin",
                        Insecure: &bool(true),
                        Password: &"adminpwd",
                    },
                },
            },
            Haproxy: &configuration.configTypeHaproxy{
                ConfigFile:       &"/etc/haproxy/haproxy.cfg",
                HAProxy:          &"haproxy",
                MasterRuntime:    (*string)(nil),
                NodeIDFile:       (*string)(nil),
                MasterWorkerMode: &bool(false),
                Reload:           &configuration.configTypeReload{
                    ReloadDelay:     &int(5),
                    ReloadCmd:       &"systemctl reload haproxy",
                    RestartCmd:      &"systemctl restart haproxy",
                    StatusCmd:       &"systemctl status haproxy",
                    ServiceName:     &"haproxy.service",
                    ReloadRetention: &int(1),
                    ReloadStrategy:  &"custom",
                    ValidateCmd:     (*string)(nil),
                },
            },
            Cluster: &configuration.configTypeCluster{
                APINodesPath:       &"",
                Token:              &"",
                ClusterTLSCertDir:  (*string)(nil),
                ActiveBootstrapKey: &"",
                APIRegisterPath:    &"",
                URL:                &"",
                Port:               &int(80),
                StorageDir:         &"",
                BootstrapKey:       &"",
                ID:                 &"cluster123456",
                APIBasePath:        &"",
                CertificateDir:     &"",
                CertificateFetched: &bool(false),
                Name:               &"cluster777Name",
                Description:        &"",
                ClusterID:          &"",
                ClusterLogTargets:  nil,
            },
            ServiceDiscovery: (*configuration.configTypeServiceDiscovery)(nil),
            Log:              &configuration.configTypeLog{
                LogTo:     &"stdout",
                LogFile:   &"/var/log/dataplaneapi/dataplaneapi.log",
                LogLevel:  &"warning",
                LogFormat: &"text",
                ACLFormat: &"%h",
                Syslog:    &configuration.configTypeSyslog{
                    SyslogAddr:     (*string)(nil),
                    SyslogProto:    &"tcp",
                    SyslogTag:      &"dataplaneapi",
                    SyslogLevel:    &"debug",
                    SyslogFacility: &"local0",
                },
            },
            LogTargets: &log.Targets{
                {
                    LogTo:          "stdout",
                    LogFile:        "",
                    LogLevel:       "debug",
                    LogFormat:      "json",
                    ACLFormat:      "",
                    SyslogAddr:     "",
                    SyslogProto:    "",
                    SyslogTag:      "",
                    SyslogLevel:    "",
                    SyslogFacility: "",
                    SyslogMsgID:    "",
                    LogTypes:       {"access", "app"},
                },
                {
                    LogTo:          "file",
                    LogFile:        "/var/log/dataplanepi.log",
                    LogLevel:       "info",
                    LogFormat:      "text",
                    ACLFormat:      "",
                    SyslogAddr:     "",
                    SyslogProto:    "",
                    SyslogTag:      "",
                    SyslogLevel:    "",
                    SyslogFacility: "",
                    SyslogMsgID:    "",
                    LogTypes:       {"app"},
                },
                {
                    LogTo:          "syslog",
                    LogFile:        "",
                    LogLevel:       "info",
                    LogFormat:      "",
                    ACLFormat:      "",
                    SyslogAddr:     "127.0.0.1",
                    SyslogProto:    "tcp",
                    SyslogTag:      "dataplaneapi",
                    SyslogLevel:    "debug",
                    SyslogFacility: "local0",
                    SyslogMsgID:    "",
                    LogTypes:       {"access"},
                },
            },
        },
        filename: "./.test/etc/example-full.yaml",
    },
    Name: configuration.AtomicString{
        value: atomic.Value{
            v:  "famous_condor",
        },
    },
    Cmdline: configuration.AtomicString{
        value: atomic.Value{
            v:  "./build/dataplaneapi -f ./.test/etc/example-full.yaml ",
        },
    },
    Status:                 configuration.AtomicString{},
    DeprecatedBootstrapKey: configuration.AtomicString{},
    reloadSignal:           0xc0012e4ea0,
    shutdownSignal:         0xc0012e4de0,
    MapSync:                &configuration.MapSync{
        mapQuitChan: 0xc00005a300,
        mu:          sync.RWMutex{},
    },
    Syslog:           log.SyslogOptions{SyslogAddr:"", SyslogProto:"tcp", SyslogTag:"dataplaneapi", SyslogLevel:"debug", SyslogFacility:"local0", SyslogMsgID:""},
    Logging:          log.LoggingOptions{LogTo:"stdout", LogFile:"/var/log/dataplaneapi/dataplaneapi.log", LogLevel:"warning", LogFormat:"text", ACLFormat:"%h"},
    RuntimeData:      configuration.RuntimeData{Host:"127.0.0.1", APIBasePath:"/v2", Port:80},
    ServiceDiscovery: configuration.ServiceDiscovery{},
    Users:            {
        {Name:"admin", Password:"adminpwd", Insecure:true},
    },
    APIOptions: configuration.APIConfiguration{APIAddress:"10.2.3.4", APIPort:80},
    LogTargets: {
        {
            LogTo:          "stdout",
            LogFile:        "",
            LogLevel:       "debug",
            LogFormat:      "json",
            ACLFormat:      "",
            SyslogAddr:     "",
            SyslogProto:    "",
            SyslogTag:      "",
            SyslogLevel:    "",
            SyslogFacility: "",
            SyslogMsgID:    "",
            LogTypes:       {"access", "app"},
        },
        {
            LogTo:          "file",
            LogFile:        "/var/log/dataplanepi.log",
            LogLevel:       "info",
            LogFormat:      "text",
            ACLFormat:      "",
            SyslogAddr:     "",
            SyslogProto:    "",
            SyslogTag:      "",
            SyslogLevel:    "",
            SyslogFacility: "",
            SyslogMsgID:    "",
            LogTypes:       {"app"},
        },
        {
            LogTo:          "syslog",
            LogFile:        "",
            LogLevel:       "info",
            LogFormat:      "",
            ACLFormat:      "",
            SyslogAddr:     "127.0.0.1",
            SyslogProto:    "tcp",
            SyslogTag:      "dataplaneapi",
            SyslogLevel:    "debug",
            SyslogFacility: "local0",
            SyslogMsgID:    "",
            LogTypes:       {"access"},
        },
    },
    HAProxy: configuration.HAProxyConfiguration{SpoeDir:"/etc/haproxy/spoe", ServiceName:"haproxy.service", HAProxy:"haproxy", UserListFile:"", ReloadCmd:"systemctl reload haproxy", RestartCmd:"systemctl restart haproxy", StatusCmd:"systemctl status haproxy", NodeIDFile:"", PIDFile:"/tmp/dataplane.pid", ReloadStrategy:"custom", TransactionDir:"/tmp/haproxy", ValidateCmd:"", BackupsDir:"/tmp/backups", MapsDir:"/etc/haproxy/maps", SpoeTransactionDir:"/tmp/spoe-haproxy", DataplaneConfig:"./.test/etc/example-full.yaml", ConfigFile:"/etc/haproxy/haproxy.cfg", Userlist:"controller", MasterRuntime:"", SSLCertsDir:"/etc/haproxy/ssl", GeneralStorageDir:"/etc/haproxy/general", ClusterTLSCertDir:"", UpdateMapFilesPeriod:10, ReloadDelay:5, MaxOpenTransactions:20, BackupsNumber:0, ReloadRetention:1, UID:0, GID:0, UpdateMapFiles:false, ShowSystemInfo:false, MasterWorkerMode:false, DisableInotify:false, DebugSocketPath:"/home/helene/go/src/gitlab.int.haproxy.com/dataplaneapi/.test/dataplane-debug.sock"},
    mutex:   sync.Mutex{},
}
